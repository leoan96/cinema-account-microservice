var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Account.html",[0,0.037,1,1.241]],["body/classes/Account.html",[0,0.03,1,1.704,2,1.133,3,0.185,4,0.185,5,0.137,6,1.825,7,0.261,8,1.352,9,2.247,10,2.624,11,1.704,12,2.09,13,2.09,14,0.833,15,2.247,16,2.09,17,1.596,18,2.09,19,3.495,20,1.704,21,2.859,22,0.755,23,0.025,24,1.556,25,3.322,26,4.686,27,3.362,28,1.203,29,2.722,30,3.453,31,2.03,32,2.722,33,5.718,34,3.733,35,5.151,36,2.722,37,2.722,38,2.722,39,3.362,40,2.722,41,2.722,42,5.151,43,4.998,44,2.722,45,2.722,46,3.97,47,2.722,48,2.722,49,6.54,50,2.722,51,0.45,52,2.961,53,2.722,54,1.407,55,3.97,56,1.407,57,2.422,58,0.318,59,1.825,60,2.722,61,2.722,62,2.722,63,5.718,64,2.624,65,0.927,66,2.305,67,0.814,68,1.661,69,2.305,70,0.01,71,0.014,72,0.01]],["title/controllers/AccountAdminController.html",[73,2.082,74,2.287]],["body/controllers/AccountAdminController.html",[0,0.023,1,1.787,3,0.144,4,0.144,5,0.107,7,0.203,14,0.795,20,0.771,22,0.528,23,0.025,24,1.401,25,2.688,28,0.974,51,0.575,58,0.144,65,0.722,67,1.358,70,0.008,71,0.012,72,0.008,73,1.292,74,2.203,75,1.42,76,4.045,77,1.794,78,1.58,79,2.118,80,0.864,81,2.197,82,2.7,83,3.004,84,2.7,85,3.004,86,3.385,87,2.7,88,2.118,89,2.643,90,2.624,91,2.118,92,3.761,93,2.118,94,1.291,95,1.131,96,4.981,97,1.458,98,2.365,99,1.794,100,2.118,101,2.118,102,3.664,103,2.118,104,2.118,105,2.118,106,1.794,107,2.118,108,2.118,109,2.118,110,2.118,111,1.58,112,2.688,113,2.118,114,2.118,115,1.58,116,3.004,117,1.794,118,1.292,119,1.576,120,2.118,121,1.58,122,1.794,123,0.317,124,1.292,125,1.794,126,1.42,127,1.794,128,1.794,129,1.794,130,1.58,131,1.58,132,1.466,133,1.58,134,1.292,135,1.931,136,1.58,137,1.58,138,1.292,139,2.005,140,1.794,141,1.292,142,1.794,143,0.771,144,1.794,145,2.118,146,0.634,147,1.196,148,2.118,149,1.58,150,4.16,151,5.199,152,4.402,153,1.546,154,2.163,155,2.118,156,2.118,157,4.539,158,2.118,159,2.118,160,2.118,161,2.118,162,2.118,163,2.118,164,4.593,165,4.028,166,4.028,167,3.41,168,4.028,169,4.028,170,4.028,171,1.794,172,4.028,173,2.457,174,2.118,175,2.118,176,2.118,177,2.118,178,1.292,179,1.794,180,2.118,181,1.794,182,3.287,183,2.118,184,1.794,185,2.118,186,1.794,187,2.118]],["title/controllers/AccountController.html",[73,2.082,188,2.287]],["body/controllers/AccountController.html",[0,0.022,1,1.605,3,0.137,4,0.137,5,0.102,7,0.193,11,1.148,14,0.823,17,1.075,20,1.148,22,0.592,23,0.026,25,2.631,28,0.953,51,0.592,58,0.137,65,1.075,67,0.945,70,0.007,71,0.011,72,0.007,73,1.228,75,1.349,78,1.5,80,0.83,81,2.177,82,2.117,84,2.612,87,2.612,89,2.659,90,2.806,92,3.457,94,1.337,95,1.172,97,1.427,98,2.335,111,1.5,112,2.751,115,1.5,116,2.355,117,1.704,118,1.228,119,1.514,121,2.355,122,1.704,123,0.301,124,1.228,125,1.704,126,1.349,127,1.704,128,1.704,129,1.704,130,1.5,131,1.5,132,1.408,133,1.5,134,1.228,135,1.868,136,1.5,137,1.5,138,1.228,139,2.693,140,1.704,143,1.148,146,1.166,147,1.417,150,3.737,152,3.737,153,1.503,154,2.292,167,1.704,178,3.246,181,3.3,186,1.704,188,2.117,189,1.704,190,2.906,191,2.926,192,2.673,193,1.704,194,2.85,195,2.012,196,2.012,197,2.012,198,2.012,199,2.012,200,2.012,201,2.012,202,2.012,203,2.012,204,3.567,205,4.796,206,2.012,207,2.012,208,2.012,209,2.012,210,2.012,211,2.012,212,2.012,213,2.012,214,2.673,215,1.926,216,2.472,217,2.012,218,1.704,219,1.704,220,2.012,221,2.012,222,2.012,223,0.782,224,4.414,225,2.012,226,2.012,227,2.012,228,2.012,229,2.012,230,2.012,231,2.012,232,2.012,233,2.012,234,2.012,235,1.514,236,2.012,237,1.704,238,2.012,239,2.012,240,2.012,241,2.012,242,3.3,243,2.012,244,2.012,245,3.158,246,2.012,247,1.704,248,3.3,249,2.012,250,2.673,251,2.012,252,2.012,253,2.012,254,2.012,255,2.012,256,2.012,257,2.012,258,2.012,259,3.3,260,1.704,261,2.012,262,2.012,263,2.012,264,2.012,265,2.012,266,2.012,267,2.012,268,2.012,269,2.012,270,3.158,271,2.012,272,2.012,273,2.012,274,2.012,275,2.012,276,2.012,277,2.012,278,2.012]],["title/modules/AccountModule.html",[279,1.021,280,1.911]],["body/modules/AccountModule.html",[0,0.038,1,1.262,3,0.235,4,0.235,5,0.175,17,1.182,23,0.025,51,0.626,52,2.587,54,1.793,56,2.435,58,0.235,68,2.873,70,0.012,71,0.017,72,0.012,74,3.584,75,3.157,95,0.799,123,0.519,135,3.216,136,2.587,188,3.584,279,1.599,280,3.781,281,1.443,282,1.443,283,1.663,284,1.663,285,1.443,286,2.563,287,2.563,288,2.937,289,2.937,290,2.937,291,2.937,292,3.462,293,3.772,294,3.197,295,2.258,296,1.663,297,1.663,298,3.469,299,2.873,300,2.587,301,3.469,302,2.937,303,2.937,304,3.469,305,3.469,306,3.469,307,3.469,308,3.469,309,3.469,310,3.469,311,4.709,312,3.987,313,4.709,314,3.469,315,3.469,316,3.469,317,3.469,318,2.937,319,2.937]],["title/interfaces/AccountProfile.html",[132,1.522,320,1.522]],["body/interfaces/AccountProfile.html",[3,0.239,4,0.239,5,0.178,7,0.338,8,1.62,9,2.766,10,3.23,11,2.098,12,2.573,13,2.573,14,1.111,15,2.766,16,2.573,17,1.965,18,2.573,20,2.098,21,3.52,22,0.787,23,0.025,24,1.634,30,4.163,58,0.239,70,0.013,71,0.017,72,0.013,132,2.121,173,3.52,320,1.57,321,2.147,322,2.98,323,2.98,324,4.885]],["title/injectables/AccountService.html",[135,1.636,325,0.686]],["body/injectables/AccountService.html",[0,0.018,1,1.99,3,0.113,4,0.113,5,0.084,7,0.16,9,1.302,10,0.933,11,0.987,12,1.211,13,1.211,14,0.885,15,1.302,16,1.211,17,0.925,18,1.211,19,3.489,20,1.587,21,1.016,22,0.637,23,0.026,24,1.511,28,1.049,30,1.117,34,0.933,51,0.558,54,0.861,56,0.861,58,0.113,59,1.117,65,1.594,67,1.738,70,0.006,71,0.01,72,0.006,80,0.713,81,2.243,82,1.82,83,2.024,84,1.82,85,2.562,86,2.955,87,2.303,89,1.429,90,1.211,94,1.437,95,1.26,96,4.177,97,1.534,98,2.436,99,2.299,102,4.176,106,1.41,111,1.242,112,2.551,123,0.249,130,1.242,131,1.242,132,0.743,133,1.242,134,1.016,135,1.302,137,1.242,138,1.016,141,1.016,142,1.41,143,0.606,144,1.41,146,0.812,147,0.987,153,1.594,154,2.565,173,2.662,179,1.41,190,2.562,193,1.41,194,2.62,215,1.656,218,1.41,219,1.41,223,1.055,235,1.647,303,1.41,325,0.546,326,0.693,327,1.41,328,2.715,329,2.715,330,3.436,331,1.41,332,2.955,333,2.763,334,1.666,335,2.024,336,1.666,337,2.715,338,1.666,339,2.715,340,1.666,341,2.715,342,1.666,343,2.715,344,1.666,345,2.715,346,1.666,347,1.666,348,1.666,349,1.666,350,1.666,351,1.666,352,1.666,353,1.41,354,1.656,355,1.242,356,2.024,357,1.666,358,1.666,359,1.41,360,2.024,361,1.666,362,1.41,363,1.666,364,1.666,365,1.666,366,1.666,367,2.909,368,1.41,369,2.715,370,2.299,371,2.024,372,1.666,373,1.666,374,2.656,375,2.715,376,1.666,377,1.666,378,1.666,379,2.715,380,1.666,381,2.715,382,1.666,383,1.666,384,1.666,385,1.666,386,2.715,387,1.666,388,1.666,389,1.666,390,1.666,391,1.666,392,1.41,393,1.666,394,1.41,395,1.242,396,2.715,397,1.666,398,1.666,399,1.666,400,2.715,401,2.715,402,1.666,403,1.666,404,2.715,405,2.715,406,1.666,407,1.666,408,2.715,409,1.666,410,1.666,411,1.666,412,1.41,413,1.016,414,1.41,415,1.666,416,1.666,417,1.666]],["title/classes/AllExceptionFilter.html",[0,0.037,418,2.545]],["body/classes/AllExceptionFilter.html",[0,0.033,2,1.24,3,0.202,4,0.202,5,0.15,7,0.286,8,1.444,14,0.482,22,0.347,23,0.026,24,0.686,28,0.794,51,0.566,57,3.009,58,0.202,64,1.669,65,1.68,67,1.999,70,0.011,71,0.015,72,0.011,80,1.114,94,0.783,95,0.686,97,0.836,118,1.819,119,2.575,123,0.446,146,1.475,147,1.794,235,2.575,418,3.161,419,4.176,420,2.223,421,2.373,422,4.932,423,4.548,424,1.429,425,4.239,426,2.981,427,3.589,428,4.805,429,3.678,430,4.548,431,2.981,432,4.176,433,2.223,434,2.223,435,2.762,436,3.678,437,2.032,438,2.524,439,1.998,440,1.669,441,2.586,442,2.524,443,2.524,444,2.524,445,2.524,446,2.524,447,3.678,448,3.678,449,2.524,450,3.306,451,2.524,452,4.006,453,4.239,454,2.981,455,2.981,456,4.805,457,2.981,458,3.589,459,2.981,460,2.981,461,2.981,462,3.589,463,3.589,464,3.161,465,2.524,466,4.239,467,2.524,468,3.589,469,2.524,470,2.524,471,1.819,472,2.524,473,2.524,474,2.981]],["title/modules/AppModule.html",[279,1.021,475,2.287]],["body/modules/AppModule.html",[0,0.039,3,0.245,4,0.245,5,0.244,23,0.026,34,2.02,51,0.644,54,1.865,56,1.865,58,0.245,70,0.013,71,0.017,72,0.013,123,0.54,279,1.632,280,3.502,281,1.501,282,1.501,283,1.73,284,1.73,285,1.501,286,1.73,287,1.73,292,3.502,295,2.318,296,1.73,297,1.73,299,2.95,300,2.69,475,4.525,476,3.055,477,3.055,478,3.816,479,3.816,480,3.608,481,3.055,482,2.02,483,3.606,484,3.608,485,3.608,486,3.055,487,3.608,488,3.606,489,3.608,490,2.69,491,3.608,492,3.606,493,3.608,494,3.608,495,4.836,496,4.094,497,3.608,498,3.608,499,3.608,500,3.608,501,2.69,502,3.608,503,3.608]],["title/guards/AuthGuard.html",[124,2.082,504,2.545]],["body/guards/AuthGuard.html",[0,0.041,3,0.256,4,0.256,5,0.19,7,0.362,14,0.902,22,0.649,23,0.025,28,1.044,51,0.569,58,0.256,67,1.489,70,0.014,71,0.018,72,0.014,80,1.308,81,1.899,94,1.464,95,1.283,97,1.396,98,1.935,123,0.564,124,3.037,146,1.667,149,2.81,153,1.695,223,1.465,325,1,435,3.671,437,1.807,440,2.11,482,2.11,505,2.81,506,3.19,507,5.02,508,4.978,509,3.19,510,4.245,511,3.768,512,4.214,513,4.422,514,3.768,515,4.978,516,3.768,517,4.214,518,3.336,519,3.19,520,2.299,521,2.81,522,3.768,523,4.214,524,3.19,525,3.768]],["title/modules/AuthenticationModule.html",[279,1.021,292,1.911]],["body/modules/AuthenticationModule.html",[0,0.044,1,1.47,3,0.274,4,0.274,5,0.204,23,0.025,51,0.605,52,3.015,54,2.09,58,0.274,68,3.179,70,0.015,71,0.019,72,0.015,95,0.931,123,0.605,216,3.844,279,1.725,281,1.682,282,1.682,283,1.938,284,1.938,285,1.682,286,2.765,287,2.765,292,3.765,294,3.338,295,2.499,296,1.938,297,1.938,299,3.179,300,3.015,302,3.423,318,3.423,319,3.423,526,3.423,527,3.423,528,3.423,529,4.043,530,4.043,531,4.412,532,3.423,533,4.043]],["title/injectables/AuthenticationService.html",[216,1.911,325,0.686]],["body/injectables/AuthenticationService.html",[0,0.036,1,1.898,3,0.225,4,0.225,5,0.167,7,0.318,9,1.587,10,1.853,11,1.898,12,1.476,13,1.476,14,0.844,15,1.587,16,1.476,17,1.127,18,1.476,20,1.659,22,0.607,23,0.026,28,0.977,51,0.62,54,1.711,56,1.711,58,0.225,59,2.218,65,1.127,67,0.99,70,0.012,71,0.016,72,0.012,80,1.198,81,2.076,89,1.897,90,2.508,94,1.371,95,1.201,97,1.279,98,2.186,123,0.496,132,2.034,134,2.019,138,2.019,146,0.99,147,1.204,153,1.127,154,1.897,191,3.811,192,3.861,215,2.782,216,2.554,223,1.773,324,2.802,325,0.916,326,1.377,331,2.802,332,4.193,335,3.401,353,2.802,362,2.802,367,2.802,370,2.802,374,2.218,532,2.802,534,2.802,535,3.31,536,3.31,537,3.31,538,4.56,539,3.31,540,3.31,541,2.468,542,3.31,543,3.31,544,3.31,545,3.31,546,3.31,547,3.31,548,3.31,549,3.31,550,3.31,551,3.31,552,3.31,553,3.31]],["title/modules/ConfigurationModule.html",[279,1.021,478,2.082]],["body/modules/ConfigurationModule.html",[0,0.049,3,0.304,4,0.304,5,0.226,23,0.025,51,0.534,58,0.304,70,0.016,71,0.02,72,0.016,123,0.671,279,1.81,281,1.865,282,1.865,283,2.149,284,2.149,285,1.865,286,2.9,287,2.9,295,2.667,296,2.149,297,2.149,478,4.1,531,4.71,554,3.795,555,3.795,556,3.795,557,3.898,558,4.482,559,4.482]],["title/injectables/ConfigurationService.html",[325,0.686,557,1.911]],["body/injectables/ConfigurationService.html",[0,0.045,3,0.281,4,0.281,5,0.209,7,0.398,8,1.804,14,0.857,22,0.616,23,0.025,28,1.093,51,0.56,58,0.281,64,2.322,70,0.015,71,0.019,72,0.015,80,1.392,94,1.392,95,1.22,97,1.163,123,0.621,146,1.746,149,3.093,153,1.413,223,1.612,325,1.065,326,1.725,424,1.988,482,2.322,509,3.511,510,4.357,557,2.966,560,3.511,561,5.837,562,4.147,563,5.297,564,4.147,565,4.147,566,2.78,567,4.353,568,5.297,569,4.147,570,4.147,571,4.147]],["title/classes/CreateAccountDTO.html",[0,0.037,194,1.911]],["body/classes/CreateAccountDTO.html",[0,0.057,2,1.367,3,0.223,4,0.223,5,0.166,7,0.316,8,1.546,9,2.493,11,1.891,12,2.319,13,2.319,14,0.734,15,2.493,16,2.319,17,1.771,18,2.319,20,1.196,22,0.739,23,0.025,24,1.574,25,3.285,28,1.19,51,0.316,58,0.308,70,0.012,71,0.016,72,0.012,194,2.911,354,2.005,413,2.005,421,1.841,572,4.809,573,2.451,574,2.451,575,3.287,576,2.451,577,3.287,578,3.385,579,4.181,580,3.287,581,3.843,582,3.287,583,3.287,584,3.287,585,2.203,586,3.042,587,3.287,588,2.451,589,3.385,590,3.287,591,3.042,592,2.451,593,3.385,594,4.259,595,2.203,596,2.203,597,1.841,598,3.843,599,2.783,600,2.451,601,2.783,602,2.783,603,3.385,604,2.203,605,2.203,606,2.451,607,2.451,608,2.203,609,2.451,610,2.451,611,2.451,612,2.451]],["title/classes/CreateAccountRoleDTO.html",[0,0.037,354,2.082]],["body/classes/CreateAccountRoleDTO.html",[0,0.056,2,1.314,3,0.214,4,0.214,5,0.159,7,0.303,8,1.503,9,2.44,11,1.851,12,2.27,13,2.27,14,0.714,15,2.44,16,2.27,17,1.733,18,2.27,20,1.851,22,0.744,23,0.025,24,1.572,25,3.253,28,1.197,51,0.303,58,0.3,70,0.011,71,0.016,72,0.011,194,3.665,354,2.693,413,1.926,421,2.472,572,3.292,573,2.355,574,2.355,576,2.355,578,3.292,579,4.109,581,3.737,585,2.116,586,2.959,588,2.355,589,3.292,591,2.959,592,2.355,593,3.292,594,4.217,595,2.116,596,2.116,597,1.768,598,3.737,599,2.673,600,2.355,601,2.673,602,2.673,603,3.292,604,2.116,605,2.116,606,2.355,607,2.355,608,2.116,609,2.355,610,2.355,611,2.355,612,2.355,613,3.157,614,6.291,615,3.157,616,3.157,617,3.157,618,3.157,619,3.157,620,3.157,621,3.157,622,3.157]],["title/classes/CustomLogger.html",[0,0.037,623,2.082]],["body/classes/CustomLogger.html",[0,0.05,2,1.906,3,0.311,4,0.311,5,0.231,7,0.44,14,0.741,22,0.533,23,0.025,24,1.535,28,0.858,51,0.44,58,0.311,70,0.016,71,0.02,72,0.016,80,1.482,94,1.204,95,1.055,97,1.285,119,2.929,123,0.686,235,2.704,421,3.158,433,3.417,471,2.795,623,3.44,624,4.775,625,3.88,626,5.639,627,6.375,628,4.582,629,4.582]],["title/classes/ErrorException.html",[0,0.037,441,2.082]],["body/classes/ErrorException.html",[0,0.053,2,2.022,3,0.33,4,0.33,5,0.245,14,0.786,23,0.025,28,0.91,51,0.467,58,0.33,70,0.017,71,0.021,72,0.017,94,1.277,95,1.119,118,2.965,123,0.728,223,1.889,235,2.33,421,3.273,428,5.308,441,3.566,630,4.115,631,5.845,632,4.86,633,4.86,634,4.86]],["title/interfaces/ExpressSessionUser.html",[90,1.522,320,1.522]],["body/interfaces/ExpressSessionUser.html",[1,1.661,3,0.31,4,0.31,5,0.23,7,0.439,8,1.917,14,1.03,22,0.655,23,0.025,24,1.405,51,0.54,58,0.31,70,0.016,71,0.02,72,0.016,89,2.721,90,2.511,132,2.84,134,2.787,178,3.885,320,2.037,321,2.787,414,5.392,421,3.152,437,2.19,635,3.867,636,3.867]],["title/modules/LoggerModule.html",[279,1.021,293,2.082]],["body/modules/LoggerModule.html",[0,0.05,3,0.314,4,0.314,5,0.233,23,0.025,51,0.545,58,0.314,70,0.017,71,0.02,72,0.017,123,0.693,279,1.835,281,1.925,282,1.925,283,2.218,284,2.218,285,1.925,286,2.72,287,2.941,293,4.004,295,2.72,296,2.218,297,2.218,413,2.822,623,4.168,637,3.917,638,3.917,639,4.626,640,4.626]],["title/injectables/LoggingInterceptor.html",[325,0.686,641,2.545]],["body/injectables/LoggingInterceptor.html",[0,0.024,3,0.149,4,0.149,5,0.111,7,0.211,8,1.151,14,0.355,17,1.151,22,0.256,23,0.026,28,0.633,51,0.506,57,3.047,58,0.149,64,1.23,65,1.576,66,2.861,67,2.029,70,0.008,71,0.012,72,0.008,80,0.888,81,1.403,94,0.577,95,0.506,97,0.616,98,1.314,115,3.45,119,2.218,123,0.329,146,1.232,147,1.498,153,0.748,215,2.062,235,1.62,259,1.859,325,0.679,326,0.914,368,1.859,392,1.859,394,1.859,395,3.072,424,1.053,435,2.954,436,4.23,437,1.62,439,1.472,440,1.892,447,3.072,448,3.45,450,3.101,452,2.52,464,3.45,467,2.861,513,3.45,520,1.34,521,1.638,566,2.265,641,2.52,642,1.859,643,4.12,644,2.196,645,3.488,646,4.626,647,2.196,648,3.38,649,2.196,650,3.38,651,2.196,652,1.859,653,3.38,654,2.196,655,2.196,656,2.196,657,2.196,658,2.196,659,2.196,660,5.275,661,4.12,662,2.196,663,3.38,664,2.196,665,1.859,666,3.38,667,2.196,668,2.196,669,2.196,670,2.196,671,2.196,672,2.196,673,2.196,674,2.196,675,2.196,676,2.196,677,2.196,678,2.196,679,2.196,680,2.196,681,4.229,682,4.626,683,4.626,684,4.626,685,4.12,686,2.196,687,1.859,688,3.38,689,2.196,690,1.859,691,4.626,692,4.626,693,4.12,694,3.38,695,3.38,696,2.196,697,3.38,698,3.38,699,4.626,700,3.38,701,3.38,702,4.626,703,4.626,704,3.38,705,4.626,706,3.38,707,2.861,708,4.12,709,2.196,710,3.38,711,2.196,712,2.196,713,3.38,714,3.38,715,2.196,716,2.196,717,3.38,718,2.196,719,2.196,720,2.196,721,2.196,722,2.196,723,2.196,724,2.196,725,2.196]],["title/interfaces/Login.html",[191,2.082,320,1.522]],["body/interfaces/Login.html",[3,0.333,4,0.333,5,0.248,7,0.471,8,2.003,11,2.374,17,2.223,22,0.684,23,0.024,24,1.56,58,0.333,70,0.018,71,0.021,72,0.018,191,3.588,320,2.19,321,2.995,726,4.157]],["title/classes/LoginDTO.html",[0,0.037,204,2.287]],["body/classes/LoginDTO.html",[0,0.062,2,1.906,3,0.311,4,0.311,5,0.231,7,0.44,8,1.921,11,2.222,17,2.081,22,0.656,23,0.025,24,1.468,25,2.916,28,1.056,51,0.44,58,0.311,70,0.016,71,0.02,72,0.016,204,3.78,576,3.417,585,3.071,586,3.78,591,3.78,594,3.78,595,3.071,596,3.071,597,2.566,604,3.071,605,3.071,727,3.88,728,4.582,729,4.582]],["title/classes/MongoExceptionFilter.html",[0,0.037,730,2.545]],["body/classes/MongoExceptionFilter.html",[0,0.035,2,1.328,3,0.217,4,0.217,5,0.161,7,0.307,8,1.515,14,0.516,22,0.371,23,0.026,24,0.735,28,0.833,51,0.559,57,3.123,58,0.217,64,2.491,65,1.744,67,1.979,70,0.011,71,0.016,72,0.011,80,1.169,94,0.839,95,0.735,97,0.895,118,1.948,119,2.654,123,0.478,146,1.531,147,1.862,235,1.531,237,2.703,250,2.703,371,2.381,420,2.381,423,4.334,424,1.531,427,3.766,429,3.817,430,4.688,432,2.703,433,2.381,435,2.866,436,3.817,437,2.133,438,2.703,439,2.14,440,1.788,443,2.703,444,2.703,445,2.703,446,2.703,447,3.817,448,3.817,449,2.703,450,3.431,451,2.703,452,4.129,458,4.688,462,2.703,463,3.766,464,3.317,465,2.703,468,3.766,469,2.703,470,2.703,471,1.948,472,2.703,473,2.703,501,2.381,520,2.714,600,2.381,730,3.317,731,4.334,732,5.119,733,4.448,734,3.192,735,5.537,736,3.192,737,3.192,738,3.192,739,3.192,740,3.192,741,3.192,742,3.192,743,3.192,744,3.192,745,3.192,746,3.192]],["title/injectables/RedisConnectService.html",[325,0.686,747,2.082]],["body/injectables/RedisConnectService.html",[0,0.042,3,0.264,4,0.264,5,0.196,7,0.373,14,0.629,22,0.453,23,0.025,28,0.952,51,0.613,58,0.264,65,1.325,67,1.521,70,0.014,71,0.018,72,0.014,80,1.335,81,1.928,89,2.115,94,1.022,95,0.896,97,1.091,123,0.583,143,1.849,146,1.521,147,1.415,153,1.325,154,1.618,223,1.976,325,1.021,326,1.618,437,1.865,557,3.644,747,3.101,748,3.795,749,3.294,750,6.003,751,2.901,752,3.362,753,3.89,754,3.795,755,3.89,756,2.607,757,2.607,758,2.901,759,3.89,760,3.294,761,3.89,762,3.89,763,4.304,764,3.89,765,3.89,766,3.89,767,2.901,768,3.89,769,3.89]],["title/modules/RedisModule.html",[279,1.021,294,1.764]],["body/modules/RedisModule.html",[0,0.041,3,0.253,4,0.253,5,0.188,23,0.025,51,0.619,58,0.253,70,0.013,71,0.018,72,0.013,123,0.558,279,1.659,281,1.551,282,1.551,283,1.788,284,1.788,285,1.551,286,2.659,287,2.659,294,3.528,295,2.37,296,1.788,297,1.788,299,2.275,333,3.799,359,3.157,481,4.186,482,2.088,747,4.139,752,2.768,758,2.781,770,3.157,771,3.157,772,3.157,773,3.799,774,3.729,775,5.545,776,3.729,777,3.686,778,3.157,779,3.157,780,3.157]],["title/injectables/RedisPromiseService.html",[325,0.686,333,1.911]],["body/injectables/RedisPromiseService.html",[0,0.037,3,0.23,4,0.23,5,0.171,7,0.325,14,0.918,22,0.661,23,0.025,24,1.539,28,1.064,51,0.545,58,0.23,67,1.58,70,0.012,71,0.017,72,0.012,80,1.217,81,2.211,94,1.492,95,1.307,97,1.481,98,2.387,123,0.507,143,1.921,146,1.013,147,1.232,153,1.578,154,2.197,223,1.317,325,0.931,326,1.409,333,2.595,371,3.938,424,2.722,748,3.986,751,2.526,752,3.18,754,3.106,756,2.271,757,2.271,758,2.526,781,2.868,782,5.281,783,4.472,784,3.387,785,5.281,786,3.387,787,5.281,788,3.387,789,5.281,790,3.387,791,3.923,792,2.868,793,3.387,794,3.387,795,3.387,796,3.387,797,3.387,798,3.387,799,3.387,800,3.387,801,3.387]],["title/injectables/RedisSubscribeExpiredService.html",[325,0.686,802,2.082]],["body/injectables/RedisSubscribeExpiredService.html",[0,0.04,3,0.249,4,0.249,5,0.185,7,0.352,14,0.592,22,0.426,23,0.025,24,1.125,28,0.915,51,0.528,58,0.249,70,0.013,71,0.018,72,0.013,78,2.731,80,1.283,81,1.997,94,0.962,95,0.843,97,1.027,98,1.899,102,3.643,123,0.548,135,3.075,143,1.777,146,1.461,147,1.777,154,2.287,223,1.899,325,0.982,326,1.524,471,3.577,501,2.731,767,2.731,773,3.518,780,3.101,802,2.98,803,4.654,804,3.684,805,3.101,806,5.863,807,3.663,808,3.663,809,3.663,810,3.663,811,3.663,812,3.663,813,3.101,814,3.663,815,3.663,816,3.663,817,3.663,818,3.663,819,3.663,820,3.663,821,3.663,822,3.663,823,3.663,824,3.663,825,3.663,826,3.101,827,3.663,828,4.885,829,3.663,830,3.101,831,3.663,832,3.663,833,3.663,834,3.663,835,3.663,836,3.663]],["title/injectables/RedisSubscriberService.html",[325,0.686,773,1.911]],["body/injectables/RedisSubscriberService.html",[0,0.041,3,0.252,4,0.252,5,0.188,7,0.357,14,0.896,22,0.644,23,0.025,24,1.453,28,1.037,51,0.566,58,0.252,67,1.113,70,0.013,71,0.018,72,0.013,80,1.297,81,2.149,94,1.455,95,1.275,97,1.384,98,2.293,123,0.557,143,1.353,146,1.113,147,1.353,153,1.681,154,2.053,223,1.918,325,0.992,326,1.547,471,3.011,748,3.954,751,2.774,752,3.303,754,3.308,756,2.493,773,2.763,778,3.149,779,3.149,791,3.149,792,3.149,804,3.712,826,4.178,837,3.149,838,3.719,839,4.935,840,4.689,841,3.719,842,3.719,843,5.538,844,3.719,845,2.774,846,3.719,847,3.719,848,3.719,849,3.719]],["title/guards/RoleGuard.html",[92,2.082,504,2.545]],["body/guards/RoleGuard.html",[0,0.037,3,0.23,4,0.23,5,0.171,7,0.325,14,0.75,20,1.232,22,0.539,23,0.026,28,0.868,34,1.897,51,0.614,58,0.23,65,1.154,67,1.779,70,0.012,71,0.017,72,0.012,80,1.217,81,1.799,89,1.928,90,2.067,92,2.827,94,1.217,95,1.067,97,0.95,98,1.801,123,0.507,138,2.067,146,1.386,147,1.232,153,1.578,223,1.801,235,1.624,325,0.931,374,2.271,412,2.868,413,2.067,434,2.526,435,3.18,437,1.624,440,1.897,482,1.897,505,2.526,507,4.808,510,4.213,512,3.923,513,4.234,518,3.106,519,2.868,520,2.067,521,2.526,523,3.923,524,2.868,850,2.868,851,3.387,852,6.14,853,3.387,854,3.387,855,3.387,856,2.526,857,3.387,858,3.387,859,4.634,860,3.387,861,3.387,862,3.387,863,3.387,864,3.387,865,3.387,866,4.634,867,3.387,868,3.387]],["title/modules/SessionModule.html",[279,1.021,479,2.082]],["body/modules/SessionModule.html",[0,0.046,3,0.288,4,0.288,5,0.214,23,0.025,51,0.596,58,0.288,70,0.015,71,0.019,72,0.015,123,0.636,143,1.544,279,1.765,280,3.661,281,1.766,282,1.766,283,2.035,284,2.035,285,1.766,286,2.829,287,2.035,294,3.38,295,2.578,296,2.035,297,2.035,299,3.28,479,4.169,486,3.594,802,3.989,804,2.845,869,3.594,870,4.245,871,3.594,872,4.245,873,4.245,874,4.245]],["title/classes/UpdateAccountDTO.html",[0,0.037,112,1.764]],["body/classes/UpdateAccountDTO.html",[0,0.046,1,2.344,2,1.215,3,0.198,4,0.198,5,0.147,7,0.28,8,1.423,9,2.338,10,2.98,11,1.774,12,2.175,13,2.175,14,1.094,15,2.338,16,2.175,17,1.661,18,2.175,21,3.247,22,0.741,23,0.025,24,1.542,25,3.293,28,1.193,30,3.567,51,0.28,58,0.198,70,0.01,71,0.015,72,0.01,112,2.16,184,2.473,395,2.178,574,2.178,578,3.115,579,3.115,585,1.958,586,1.958,588,2.178,589,2.178,591,2.8,592,2.178,593,4.807,594,4.134,595,1.958,596,1.958,597,1.636,603,3.115,604,1.958,605,1.958,606,2.178,607,2.178,608,1.958,609,2.178,610,2.178,611,2.178,612,2.178,875,5.458,876,2.473,877,2.921,878,4.177,879,2.921,880,2.921,881,2.921,882,4.177,883,2.921,884,4.177,885,2.921,886,2.921,887,2.921,888,2.921,889,2.921,890,2.921,891,2.921,892,2.921,893,4.877,894,2.921,895,2.921]],["title/interfaces/UserRedisSession.html",[141,2.082,320,1.522]],["body/interfaces/UserRedisSession.html",[3,0.277,4,0.277,5,0.206,7,0.391,8,1.785,11,2.223,12,2.726,13,2.726,14,0.989,16,2.726,18,2.726,19,4.557,20,2.223,22,0.776,23,0.025,24,1.634,58,0.277,70,0.015,71,0.019,72,0.015,141,3.197,143,1.483,173,3.728,320,1.819,321,2.487,896,3.452,897,3.452]],["title/injectables/ValidationPipe.html",[139,2.082,325,0.686]],["body/injectables/ValidationPipe.html",[0,0.059,3,0.242,4,0.242,5,0.18,7,0.343,14,0.777,22,0.559,23,0.026,24,0.822,28,0.9,31,2.664,34,2,51,0.557,58,0.242,65,1.217,67,1.736,70,0.013,71,0.017,72,0.013,80,1.262,81,1.849,94,1.262,95,1.106,97,1.347,123,0.535,139,2.93,146,1.624,153,1.849,154,1.486,325,0.965,326,1.486,374,2.394,424,2.602,441,2.93,442,3.024,456,3.024,517,4.595,520,2.179,566,3.22,597,2,898,3.024,899,4.803,900,4.803,901,4.803,902,4.914,903,3.572,904,5.427,905,4.803,906,5.804,907,3.572,908,4.803,909,3.572,910,3.024,911,3.572,912,3.572,913,3.572,914,3.572,915,3.572,916,3.572,917,3.024,918,4.803,919,3.572,920,3.572,921,3.572,922,3.572,923,3.572,924,3.572]],["title/coverage.html",[925,3.943]],["body/coverage.html",[0,0.063,1,1.228,5,0.111,6,2.263,22,0.255,23,0.025,65,0.747,68,1.338,70,0.008,71,0.012,72,0.008,73,2.059,74,1.47,76,4.632,77,1.856,89,0.912,90,0.978,92,1.338,112,1.134,119,1.051,124,1.338,126,1.47,132,0.978,135,1.051,139,1.338,141,1.338,143,0.797,188,1.47,189,1.856,191,1.338,194,1.228,204,1.47,216,1.228,285,0.912,320,2.062,322,1.856,323,1.856,325,1.169,327,1.856,333,1.228,354,1.338,355,1.635,356,1.635,360,1.635,418,1.635,419,1.856,420,2.517,441,1.338,483,1.635,488,1.635,490,1.635,492,1.635,504,2.517,506,1.856,518,1.47,534,1.856,541,1.635,557,1.228,560,1.856,567,1.635,572,2.517,573,2.517,623,1.338,624,1.856,625,1.856,630,1.856,635,1.856,636,1.856,641,1.635,642,1.856,726,1.856,727,1.856,730,1.635,731,1.856,747,1.338,748,2.759,749,1.856,752,1.228,757,1.47,773,1.228,777,1.635,781,1.856,802,1.338,803,1.856,804,1.47,805,1.856,830,5.771,837,1.856,845,1.635,850,1.856,856,1.635,875,1.856,876,1.856,896,1.856,897,1.856,898,1.856,902,1.856,917,5.966,925,1.856,926,2.193,927,2.193,928,2.193,929,2.858,930,1.856,931,6.831,932,1.856,933,1.856,934,4.623,935,3.376,936,5.939,937,2.858,938,2.517,939,1.856,940,3.485,941,2.193,942,3.376,943,4.65,944,4.65,945,1.856,946,1.856,947,1.856,948,1.856,949,1.856,950,1.856,951,1.856,952,4.226,953,1.856,954,1.856,955,1.856,956,1.856,957,1.856,958,3.376,959,2.193,960,2.193,961,2.193,962,2.193,963,1.856,964,1.856,965,2.858,966,2.858,967,2.858,968,1.856,969,2.193,970,2.193,971,2.193]],["title/dependencies.html",[282,1.707,972,2.85]],["body/dependencies.html",[0,0.057,23,0.026,54,2.096,56,2.096,57,2.473,70,0.015,71,0.019,72,0.015,89,1.687,123,0.607,143,2.1,215,2.473,282,1.687,434,3.023,437,2.769,439,2.717,440,2.27,482,2.27,597,2.27,652,3.432,760,3.432,910,3.432,973,5.775,974,4.054,975,4.054,976,4.054,977,4.054,978,4.054,979,4.054,980,4.054,981,4.054,982,4.054,983,4.054,984,4.054,985,4.054,986,4.054,987,4.054,988,4.054,989,4.054,990,4.054,991,4.054,992,4.054,993,4.054,994,4.054,995,4.054,996,4.054,997,4.054,998,4.054,999,4.054,1000,4.054,1001,4.054,1002,4.054,1003,4.054,1004,4.054,1005,4.054,1006,4.054,1007,4.054,1008,4.054,1009,4.054,1010,4.054,1011,4.054,1012,4.054,1013,4.054]],["title/miscellaneous/enumerations.html",[1014,1.366,1015,3.475]],["body/miscellaneous/enumerations.html",[7,0.5,20,2.216,23,0.024,70,0.019,71,0.022,72,0.019,164,5.158,178,3.717,424,2.921,1014,2.498,1015,4.412,1016,5.211,1017,5.211]],["title/miscellaneous/functions.html",[1014,1.366,1018,3.475]],["body/miscellaneous/functions.html",[7,0.513,23,0.022,70,0.019,71,0.022,72,0.019,285,2.714,938,3.987,1014,2.563,1018,4.527,1019,4.527]],["title/index.html",[7,0.328,1020,2.889]],["body/index.html",[2,1.355,23,0.025,70,0.012,71,0.016,72,0.012,75,2.183,135,2.982,216,3.483,248,3.819,260,2.758,279,0.974,280,3.745,281,1.355,282,1.355,283,1.562,284,1.562,285,1.355,286,1.562,287,1.562,288,2.758,289,2.758,290,2.758,291,2.758,292,3.604,293,3.407,294,3.479,295,2.163,296,1.562,297,1.562,321,1.987,326,1.355,333,3.483,475,4.368,476,2.758,477,2.758,478,3.701,479,3.927,505,2.429,526,2.758,527,2.758,528,2.758,554,2.758,555,2.758,556,2.758,557,3.483,623,3.407,637,2.758,638,2.758,747,3.795,770,2.758,771,2.758,772,2.758,773,3.483,802,3.157,869,2.758,871,2.758,1020,2.758,1021,3.257,1022,4.51]],["title/modules.html",[281,1.937]],["body/modules.html",[23,0.021,70,0.017,71,0.021,72,0.017,280,2.712,281,2.015,292,2.712,293,2.955,294,2.504,475,3.247,478,2.955,479,2.955,1023,6.83,1024,6.83,1025,6.83,1026,6.83]],["title/miscellaneous/typealiases.html",[1014,1.366,1027,4.104]],["body/miscellaneous/typealiases.html",[6,3.584,7,0.513,22,0.622,23,0.022,59,4.145,70,0.019,71,0.022,72,0.019,1014,2.563,1028,5.346,1029,4.527]],["title/miscellaneous/variables.html",[1014,1.366,1030,3.475]],["body/miscellaneous/variables.html",[1,0.88,5,0.073,6,0.972,7,0.139,9,1.161,10,1.356,11,1.324,12,1.08,13,1.08,15,1.161,16,1.08,17,1.062,18,1.08,20,1.134,21,1.477,22,0.703,23,0.026,24,1.12,27,2.05,31,1.081,34,2.038,39,2.05,43,3.703,56,0.75,64,3.63,65,1.49,67,1.512,68,1.477,69,1.228,70,0.005,71,0.009,72,0.005,76,1.805,80,0.381,81,1.24,82,0.972,83,1.081,84,0.972,85,1.081,86,1.081,87,0.972,89,1.297,90,0.647,98,1.212,112,0.75,116,1.081,119,1.161,121,1.805,126,2.44,132,1.624,143,1.472,153,1.49,154,1.297,171,1.228,173,0.884,178,2.221,190,1.081,214,1.228,242,2.05,247,1.228,312,1.228,332,1.081,335,1.081,355,1.805,356,1.805,360,1.805,424,3.108,429,2.324,435,1.356,450,2.089,483,1.805,488,1.805,490,1.805,492,1.805,496,1.228,510,3.745,518,1.623,541,1.805,566,2.932,567,1.805,608,1.623,645,2.05,665,1.228,681,1.228,687,1.228,690,2.05,707,1.228,752,1.745,754,2.44,756,2.089,757,2.089,763,1.228,767,1.081,777,2.324,783,1.228,813,1.228,840,1.228,845,2.324,856,1.805,929,1.228,930,2.05,932,1.228,933,1.228,937,1.228,938,1.081,939,1.228,940,1.228,943,4.119,944,4.119,945,2.05,946,2.05,947,2.05,948,2.05,949,2.05,950,2.05,951,2.05,952,3.703,953,2.05,954,2.639,955,2.05,956,2.639,957,3.703,963,1.228,964,1.228,965,1.228,966,2.639,967,1.228,968,1.228,1014,0.695,1019,1.228,1029,1.228,1030,1.228,1031,1.45,1032,1.45,1033,3.117,1034,5.479,1035,1.45,1036,1.45,1037,1.45,1038,2.421,1039,2.421,1040,1.45,1041,2.421,1042,2.421,1043,1.45,1044,1.45,1045,1.45,1046,1.45,1047,1.45,1048,2.421,1049,1.45,1050,2.421,1051,1.45,1052,1.45,1053,2.421,1054,1.45,1055,1.45,1056,1.45,1057,1.45,1058,1.45,1059,1.45,1060,1.45,1061,1.45,1062,2.421,1063,1.45,1064,1.45,1065,1.45,1066,1.45,1067,1.45,1068,1.45,1069,1.45,1070,2.421,1071,1.45,1072,1.45,1073,1.45,1074,3.117,1075,1.45,1076,1.45,1077,1.45,1078,1.45,1079,1.45,1080,1.45,1081,2.421,1082,1.45,1083,2.421,1084,1.45,1085,2.421,1086,1.45,1087,1.45,1088,1.45,1089,1.45,1090,1.45,1091,1.45,1092,1.45,1093,1.45,1094,1.45,1095,3.64,1096,1.45,1097,1.45,1098,2.421,1099,1.45,1100,1.45,1101,2.421,1102,1.45,1103,1.45,1104,1.45,1105,1.45,1106,1.45,1107,1.45,1108,1.45,1109,1.45,1110,1.45,1111,1.45,1112,1.45,1113,1.45,1114,1.45,1115,4.374,1116,1.45,1117,1.45,1118,1.45,1119,2.421,1120,2.421,1121,2.421,1122,2.421,1123,2.421,1124,2.421,1125,3.64,1126,3.64,1127,3.64,1128,3.117,1129,2.421,1130,1.45,1131,1.45,1132,1.45,1133,1.45,1134,1.45,1135,1.45,1136,2.421,1137,2.421,1138,2.421,1139,2.421,1140,1.45,1141,2.421,1142,1.45,1143,1.45,1144,1.45,1145,1.45,1146,1.45,1147,1.45,1148,3.117,1149,1.45,1150,1.45,1151,1.45,1152,1.45,1153,1.45,1154,1.45,1155,1.45,1156,1.45,1157,1.45,1158,1.45,1159,1.45,1160,1.45,1161,1.45,1162,1.45,1163,1.45,1164,1.45,1165,2.421,1166,1.45]]],"invertedIndex":[["",{"_index":23,"title":{},"body":{"classes/Account.html":{},"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"interfaces/AccountProfile.html":{},"injectables/AccountService.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"interfaces/ExpressSessionUser.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Login.html":{},"classes/LoginDTO.html":{},"classes/MongoExceptionFilter.html":{},"injectables/RedisConnectService.html":{},"modules/RedisModule.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"guards/RoleGuard.html":{},"modules/SessionModule.html":{},"classes/UpdateAccountDTO.html":{},"interfaces/UserRedisSession.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":917,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["0.0.16",{"_index":978,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":1008,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":992,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":991,"title":{},"body":{"dependencies.html":{}}}],["0.6.3",{"_index":974,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":931,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":959,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":960,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":941,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":962,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":961,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":935,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":936,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":934,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":969,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":942,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":958,"title":{},"body":{"coverage.html":{}}}],["06t07:36:34.394z",{"_index":1127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["07",{"_index":1126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":242,"title":{},"body":{"controllers/AccountController.html":{},"miscellaneous/variables.html":{}}}],["1.11.0",{"_index":995,"title":{},"body":{"dependencies.html":{}}}],["1.17.2",{"_index":997,"title":{},"body":{"dependencies.html":{}}}],["1.2.4",{"_index":996,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1085,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1000",{"_index":1083,"title":{},"body":{"miscellaneous/variables.html":{}}}],["11000",{"_index":740,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["12",{"_index":589,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/UpdateAccountDTO.html":{}}}],["12)@isoptional",{"_index":890,"title":{},"body":{"classes/UpdateAccountDTO.html":{}}}],["129",{"_index":1123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":248,"title":{},"body":{"controllers/AccountController.html":{},"index.html":{}}}],["2.29.1",{"_index":1003,"title":{},"body":{"dependencies.html":{}}}],["2.8.30",{"_index":986,"title":{},"body":{"dependencies.html":{}}}],["293",{"_index":1124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":255,"title":{},"body":{"controllers/AccountController.html":{}}}],["3.0.2",{"_index":1010,"title":{},"body":{"dependencies.html":{}}}],["3.1.2",{"_index":1005,"title":{},"body":{"dependencies.html":{}}}],["3.6.19",{"_index":984,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":1097,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":260,"title":{},"body":{"controllers/AccountController.html":{},"index.html":{}}}],["4.1.2",{"_index":988,"title":{},"body":{"dependencies.html":{}}}],["4.14.170",{"_index":982,"title":{},"body":{"dependencies.html":{}}}],["4.17.21",{"_index":1002,"title":{},"body":{"dependencies.html":{}}}],["4.26.4",{"_index":980,"title":{},"body":{"dependencies.html":{}}}],["4.27.6",{"_index":1001,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":999,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":990,"title":{},"body":{"dependencies.html":{}}}],["5.12.15",{"_index":1004,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":586,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/LoginDTO.html":{},"classes/UpdateAccountDTO.html":{}}}],["50)@isoptional",{"_index":888,"title":{},"body":{"classes/UpdateAccountDTO.html":{}}}],["500",{"_index":459,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["6.0.0",{"_index":993,"title":{},"body":{"dependencies.html":{}}}],["6.6.6",{"_index":1011,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":1084,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7",{"_index":1021,"title":{},"body":{"index.html":{}}}],["7.2.4",{"_index":975,"title":{},"body":{"dependencies.html":{}}}],["7.6.15",{"_index":973,"title":{},"body":{"dependencies.html":{}}}],["747",{"_index":579,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/UpdateAccountDTO.html":{}}}],["747)@isoptional",{"_index":882,"title":{},"body":{"classes/UpdateAccountDTO.html":{}}}],["8.3.2",{"_index":1013,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":1022,"title":{},"body":{"index.html":{}}}],["930",{"_index":1122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_id",{"_index":324,"title":{},"body":{"interfaces/AccountProfile.html":{},"injectables/AuthenticationService.html":{}}}],["ability",{"_index":895,"title":{},"body":{"classes/UpdateAccountDTO.html":{}}}],["above",{"_index":829,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{}}}],["access",{"_index":1049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["account",{"_index":1,"title":{"classes/Account.html":{}},"body":{"classes/Account.html":{},"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/ExpressSessionUser.html":{},"classes/UpdateAccountDTO.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["account.constant",{"_index":361,"title":{},"body":{"injectables/AccountService.html":{}}}],["account.dto",{"_index":219,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["account.dto.ts",{"_index":573,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"coverage.html":{}}}],["account.dto.ts:14",{"_index":580,"title":{},"body":{"classes/CreateAccountDTO.html":{}}}],["account.dto.ts:18",{"_index":584,"title":{},"body":{"classes/CreateAccountDTO.html":{}}}],["account.dto.ts:22",{"_index":587,"title":{},"body":{"classes/CreateAccountDTO.html":{}}}],["account.dto.ts:26",{"_index":577,"title":{},"body":{"classes/CreateAccountDTO.html":{}}}],["account.dto.ts:30",{"_index":590,"title":{},"body":{"classes/CreateAccountDTO.html":{}}}],["account.dto.ts:34",{"_index":582,"title":{},"body":{"classes/CreateAccountDTO.html":{}}}],["account.dto.ts:39",{"_index":575,"title":{},"body":{"classes/CreateAccountDTO.html":{}}}],["account.dto.ts:43",{"_index":583,"title":{},"body":{"classes/CreateAccountDTO.html":{}}}],["account.dto.ts:47",{"_index":613,"title":{},"body":{"classes/CreateAccountRoleDTO.html":{}}}],["account.helper",{"_index":357,"title":{},"body":{"injectables/AccountService.html":{}}}],["account.name",{"_index":319,"title":{},"body":{"modules/AccountModule.html":{},"modules/AuthenticationModule.html":{}}}],["account.password",{"_index":549,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["account.service",{"_index":136,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{}}}],["account/account.helper",{"_index":542,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["account/admin",{"_index":79,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["account/interface/account",{"_index":543,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["account/interface/express",{"_index":545,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["account/schema/account.schema",{"_index":532,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["account['_id",{"_index":271,"title":{},"body":{"controllers/AccountController.html":{}}}],["accountadmincontroller",{"_index":74,"title":{"controllers/AccountAdminController.html":{}},"body":{"controllers/AccountAdminController.html":{},"modules/AccountModule.html":{},"coverage.html":{}}}],["accountcontroller",{"_index":188,"title":{"controllers/AccountController.html":{}},"body":{"controllers/AccountController.html":{},"modules/AccountModule.html":{},"coverage.html":{}}}],["accountdocument",{"_index":59,"title":{},"body":{"classes/Account.html":{},"injectables/AccountService.html":{},"injectables/AuthenticationService.html":{},"miscellaneous/typealiases.html":{}}}],["accountexist",{"_index":381,"title":{},"body":{"injectables/AccountService.html":{}}}],["accountid",{"_index":96,"title":{},"body":{"controllers/AccountAdminController.html":{},"injectables/AccountService.html":{}}}],["accountmodel",{"_index":335,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthenticationService.html":{},"miscellaneous/variables.html":{}}}],["accountmodel.findone",{"_index":1103,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accountmodule",{"_index":280,"title":{"modules/AccountModule.html":{}},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/SessionModule.html":{},"index.html":{},"modules.html":{}}}],["accountprofile",{"_index":132,"title":{"interfaces/AccountProfile.html":{}},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"interfaces/AccountProfile.html":{},"injectables/AccountService.html":{},"injectables/AuthenticationService.html":{},"interfaces/ExpressSessionUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["accountschema",{"_index":68,"title":{},"body":{"classes/Account.html":{},"modules/AccountModule.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["accountservice",{"_index":135,"title":{"injectables/AccountService.html":{}},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"coverage.html":{},"index.html":{}}}],["actually",{"_index":268,"title":{},"body":{"controllers/AccountController.html":{}}}],["add",{"_index":722,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["admin",{"_index":164,"title":{},"body":{"controllers/AccountAdminController.html":{},"miscellaneous/enumerations.html":{}}}],["admin.controller",{"_index":305,"title":{},"body":{"modules/AccountModule.html":{}}}],["admin.controller.ts",{"_index":77,"title":{},"body":{"controllers/AccountAdminController.html":{},"coverage.html":{}}}],["admin.controller.ts:100",{"_index":93,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["admin.controller.ts:35",{"_index":110,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["admin.controller.ts:43",{"_index":105,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["admin.controller.ts:53",{"_index":108,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["admin.controller.ts:63",{"_index":101,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["admin.controller.ts:80",{"_index":114,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["admin.firstname",{"_index":168,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["admin.lastname",{"_index":169,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["admin.mock",{"_index":943,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["admin.mock.ts",{"_index":952,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["again",{"_index":250,"title":{},"body":{"controllers/AccountController.html":{},"classes/MongoExceptionFilter.html":{}}}],["agent",{"_index":707,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["aliases",{"_index":1028,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alive",{"_index":1056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allexceptionfilter",{"_index":418,"title":{"classes/AllExceptionFilter.html":{}},"body":{"classes/AllExceptionFilter.html":{},"coverage.html":{}}}],["allow",{"_index":1051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allowedheaders",{"_index":1047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allowedroles",{"_index":859,"title":{},"body":{"guards/RoleGuard.html":{}}}],["allowedroles.some((role",{"_index":867,"title":{},"body":{"guards/RoleGuard.html":{}}}],["already",{"_index":384,"title":{},"body":{"injectables/AccountService.html":{}}}],["api",{"_index":661,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["app",{"_index":1091,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.config",{"_index":570,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["app.configuration",{"_index":484,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfig",{"_index":567,"title":{},"body":{"injectables/ConfigurationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["appconfig(this.configservice",{"_index":568,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["appconfiguration",{"_index":483,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["appmodule",{"_index":475,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["argumentmetadata",{"_index":906,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["argumentshost",{"_index":430,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["array",{"_index":923,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["associated",{"_index":245,"title":{},"body":{"controllers/AccountController.html":{}}}],["async",{"_index":81,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"guards/AuthGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/RedisConnectService.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"guards/RoleGuard.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["asynchronous",{"_index":821,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{}}}],["asynchronously",{"_index":797,"title":{},"body":{"injectables/RedisPromiseService.html":{}}}],["auth_pass",{"_index":1140,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authentication.service",{"_index":533,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["authentication/authentication.module",{"_index":301,"title":{},"body":{"modules/AccountModule.html":{}}}],["authentication/authentication.service",{"_index":217,"title":{},"body":{"controllers/AccountController.html":{}}}],["authenticationmodule",{"_index":292,"title":{"modules/AuthenticationModule.html":{}},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"index.html":{},"modules.html":{}}}],["authenticationservice",{"_index":216,"title":{"injectables/AuthenticationService.html":{}},"body":{"controllers/AccountController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"coverage.html":{},"index.html":{}}}],["authguard",{"_index":124,"title":{"guards/AuthGuard.html":{}},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"guards/AuthGuard.html":{},"coverage.html":{}}}],["authorization",{"_index":687,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["availableconfigs",{"_index":561,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["avatar",{"_index":9,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountProfile.html":{},"injectables/AccountService.html":{},"injectables/AuthenticationService.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/UpdateAccountDTO.html":{},"miscellaneous/variables.html":{}}}],["await",{"_index":154,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"injectables/AuthenticationService.html":{},"injectables/RedisConnectService.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["ba8db73e07de",{"_index":798,"title":{},"body":{"injectables/RedisPromiseService.html":{}}}],["backend",{"_index":689,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["backendtoken",{"_index":1165,"title":{},"body":{"miscellaneous/variables.html":{}}}],["badrequestexception",{"_index":352,"title":{},"body":{"injectables/AccountService.html":{}}}],["badrequestexception('account",{"_index":383,"title":{},"body":{"injectables/AccountService.html":{}}}],["badrequestexception('invalid",{"_index":375,"title":{},"body":{"injectables/AccountService.html":{}}}],["based",{"_index":366,"title":{},"body":{"injectables/AccountService.html":{}}}],["baseexceptionfilter",{"_index":422,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["bcrypt",{"_index":989,"title":{},"body":{"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":1099,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt.hash(oldpassword",{"_index":1102,"title":{},"body":{"miscellaneous/variables.html":{}}}],["before",{"_index":672,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["being",{"_index":269,"title":{},"body":{"controllers/AccountController.html":{}}}],["below",{"_index":680,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["best",{"_index":1075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["body",{"_index":115,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"injectables/LoggingInterceptor.html":{}}}],["body(new",{"_index":181,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{}}}],["boolean",{"_index":517,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/ValidationPipe.html":{}}}],["bootstrap",{"_index":285,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConfigurationModule.html":{},"modules/LoggerModule.html":{},"modules/RedisModule.html":{},"modules/SessionModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["break",{"_index":742,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["browse",{"_index":1026,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1023,"title":{},"body":{"modules.html":{}}}],["built",{"_index":657,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["c05047befec3",{"_index":818,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{}}}],["cache",{"_index":1059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cachemodule",{"_index":1068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["call",{"_index":823,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{}}}],["callhandler",{"_index":646,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["canactivate",{"_index":507,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RoleGuard.html":{}}}],["canactivate(context",{"_index":512,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RoleGuard.html":{}}}],["case",{"_index":237,"title":{},"body":{"controllers/AccountController.html":{},"classes/MongoExceptionFilter.html":{}}}],["catch",{"_index":423,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["catch(exception",{"_index":427,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["catch(mongoerror",{"_index":737,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["catches",{"_index":671,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["cause",{"_index":264,"title":{},"body":{"controllers/AccountController.html":{}}}],["changes",{"_index":1151,"title":{},"body":{"miscellaneous/variables.html":{}}}],["channel",{"_index":826,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{}}}],["class",{"_index":0,"title":{"classes/Account.html":{},"classes/AllExceptionFilter.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"classes/LoginDTO.html":{},"classes/MongoExceptionFilter.html":{},"classes/UpdateAccountDTO.html":{}},"body":{"classes/Account.html":{},"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDTO.html":{},"classes/MongoExceptionFilter.html":{},"injectables/RedisConnectService.html":{},"modules/RedisModule.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"guards/RoleGuard.html":{},"modules/SessionModule.html":{},"classes/UpdateAccountDTO.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Account.html":{},"classes/AllExceptionFilter.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"classes/LoginDTO.html":{},"classes/MongoExceptionFilter.html":{},"classes/UpdateAccountDTO.html":{},"index.html":{}}}],["client",{"_index":754,"title":{},"body":{"injectables/RedisConnectService.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscriberService.html":{},"miscellaneous/variables.html":{}}}],["client.config('set",{"_index":1153,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cluster_accountmodule",{"_index":288,"title":{},"body":{"modules/AccountModule.html":{},"index.html":{}}}],["cluster_accountmodule_exports",{"_index":289,"title":{},"body":{"modules/AccountModule.html":{},"index.html":{}}}],["cluster_accountmodule_imports",{"_index":290,"title":{},"body":{"modules/AccountModule.html":{},"index.html":{}}}],["cluster_accountmodule_providers",{"_index":291,"title":{},"body":{"modules/AccountModule.html":{},"index.html":{}}}],["cluster_appmodule",{"_index":476,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":477,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_authenticationmodule",{"_index":526,"title":{},"body":{"modules/AuthenticationModule.html":{},"index.html":{}}}],["cluster_authenticationmodule_exports",{"_index":528,"title":{},"body":{"modules/AuthenticationModule.html":{},"index.html":{}}}],["cluster_authenticationmodule_imports",{"_index":529,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["cluster_authenticationmodule_providers",{"_index":527,"title":{},"body":{"modules/AuthenticationModule.html":{},"index.html":{}}}],["cluster_configurationmodule",{"_index":554,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["cluster_configurationmodule_exports",{"_index":556,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["cluster_configurationmodule_providers",{"_index":555,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["cluster_loggermodule",{"_index":637,"title":{},"body":{"modules/LoggerModule.html":{},"index.html":{}}}],["cluster_loggermodule_exports",{"_index":638,"title":{},"body":{"modules/LoggerModule.html":{},"index.html":{}}}],["cluster_redismodule",{"_index":770,"title":{},"body":{"modules/RedisModule.html":{},"index.html":{}}}],["cluster_redismodule_exports",{"_index":772,"title":{},"body":{"modules/RedisModule.html":{},"index.html":{}}}],["cluster_redismodule_providers",{"_index":771,"title":{},"body":{"modules/RedisModule.html":{},"index.html":{}}}],["cluster_sessionmodule",{"_index":869,"title":{},"body":{"modules/SessionModule.html":{},"index.html":{}}}],["cluster_sessionmodule_imports",{"_index":870,"title":{},"body":{"modules/SessionModule.html":{}}}],["cluster_sessionmodule_providers",{"_index":871,"title":{},"body":{"modules/SessionModule.html":{},"index.html":{}}}],["cn",{"_index":611,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/UpdateAccountDTO.html":{}}}],["code",{"_index":677,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["comparepassword",{"_index":541,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["comparepassword(password",{"_index":548,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["config/config.module",{"_index":485,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":481,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{}}}],["configmodule.forroot",{"_index":497,"title":{},"body":{"modules/AppModule.html":{}}}],["configname",{"_index":565,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["configservice",{"_index":510,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/ConfigurationService.html":{},"guards/RoleGuard.html":{},"miscellaneous/variables.html":{}}}],["configservice.get('app.environment",{"_index":1080,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('app.session.secret",{"_index":1071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('backend_token",{"_index":1166,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('mongoose.uri",{"_index":1130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('redis.host",{"_index":1138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('redis.password",{"_index":1141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('redis.port",{"_index":1139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configuration",{"_index":1090,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configuration.service",{"_index":559,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configurationmodule",{"_index":478,"title":{"modules/ConfigurationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"index.html":{},"modules.html":{}}}],["configurationservice",{"_index":557,"title":{"injectables/ConfigurationService.html":{}},"body":{"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"injectables/RedisConnectService.html":{},"coverage.html":{},"index.html":{}}}],["configure",{"_index":495,"title":{},"body":{"modules/AppModule.html":{}}}],["configuring",{"_index":1067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connect",{"_index":760,"title":{},"body":{"injectables/RedisConnectService.html":{},"dependencies.html":{}}}],["connect.service",{"_index":776,"title":{},"body":{"modules/RedisModule.html":{}}}],["connect.service.ts",{"_index":749,"title":{},"body":{"injectables/RedisConnectService.html":{},"coverage.html":{}}}],["connect.service.ts:15",{"_index":755,"title":{},"body":{"injectables/RedisConnectService.html":{}}}],["connect.service.ts:9",{"_index":753,"title":{},"body":{"injectables/RedisConnectService.html":{}}}],["connection",{"_index":502,"title":{},"body":{"modules/AppModule.html":{}}}],["connectredis",{"_index":759,"title":{},"body":{"injectables/RedisConnectService.html":{}}}],["connectredis(session",{"_index":764,"title":{},"body":{"injectables/RedisConnectService.html":{}}}],["const",{"_index":67,"title":{},"body":{"classes/Account.html":{},"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"injectables/RedisConnectService.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscriberService.html":{},"guards/RoleGuard.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":223,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"guards/AuthGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"classes/ErrorException.html":{},"injectables/RedisConnectService.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"guards/RoleGuard.html":{}}}],["constructor(@inject(redis_client",{"_index":793,"title":{},"body":{"injectables/RedisPromiseService.html":{}}}],["constructor(accountmodel",{"_index":331,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthenticationService.html":{}}}],["constructor(client",{"_index":751,"title":{},"body":{"injectables/RedisConnectService.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscriberService.html":{}}}],["constructor(configservice",{"_index":509,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/ConfigurationService.html":{}}}],["constructor(error",{"_index":631,"title":{},"body":{"classes/ErrorException.html":{}}}],["constructor(private",{"_index":149,"title":{},"body":{"controllers/AccountAdminController.html":{},"guards/AuthGuard.html":{},"injectables/ConfigurationService.html":{}}}],["constructor(redissubscriberservice",{"_index":807,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{}}}],["constructor(reflector",{"_index":851,"title":{},"body":{"guards/RoleGuard.html":{}}}],["contain",{"_index":833,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{}}}],["contains",{"_index":831,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{}}}],["content",{"_index":1048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["context",{"_index":440,"title":{},"body":{"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"guards/RoleGuard.html":{},"dependencies.html":{}}}],["context.getclass",{"_index":862,"title":{},"body":{"guards/RoleGuard.html":{}}}],["context.getclass().name",{"_index":697,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["context.gethandler",{"_index":861,"title":{},"body":{"guards/RoleGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":521,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/LoggingInterceptor.html":{},"guards/RoleGuard.html":{}}}],["context.switchtohttp().getresponse",{"_index":655,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["control",{"_index":1050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controller",{"_index":73,"title":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{}},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"coverage.html":{}}}],["controller('/account",{"_index":221,"title":{},"body":{"controllers/AccountController.html":{}}}],["controller('/account/admin",{"_index":145,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["controller/account",{"_index":304,"title":{},"body":{"modules/AccountModule.html":{}}}],["controller/account.controller",{"_index":307,"title":{},"body":{"modules/AccountModule.html":{}}}],["controllers",{"_index":75,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"index.html":{}}}],["cookie",{"_index":1074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["correlationid",{"_index":450,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["cors",{"_index":1043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coverage",{"_index":925,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":234,"title":{},"body":{"controllers/AccountController.html":{}}}],["createaccount",{"_index":190,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"miscellaneous/variables.html":{}}}],["createaccount(createaccountdto",{"_index":193,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["createaccountdto",{"_index":194,"title":{"classes/CreateAccountDTO.html":{}},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"coverage.html":{}}}],["createaccountdto:14",{"_index":617,"title":{},"body":{"classes/CreateAccountRoleDTO.html":{}}}],["createaccountdto:18",{"_index":620,"title":{},"body":{"classes/CreateAccountRoleDTO.html":{}}}],["createaccountdto:22",{"_index":621,"title":{},"body":{"classes/CreateAccountRoleDTO.html":{}}}],["createaccountdto:26",{"_index":616,"title":{},"body":{"classes/CreateAccountRoleDTO.html":{}}}],["createaccountdto:30",{"_index":622,"title":{},"body":{"classes/CreateAccountRoleDTO.html":{}}}],["createaccountdto:34",{"_index":618,"title":{},"body":{"classes/CreateAccountRoleDTO.html":{}}}],["createaccountdto:39",{"_index":615,"title":{},"body":{"classes/CreateAccountRoleDTO.html":{}}}],["createaccountdto:43",{"_index":619,"title":{},"body":{"classes/CreateAccountRoleDTO.html":{}}}],["createaccountreponse",{"_index":945,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["createaccountroledto",{"_index":354,"title":{"classes/CreateAccountRoleDTO.html":{}},"body":{"injectables/AccountService.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"coverage.html":{}}}],["created",{"_index":266,"title":{},"body":{"controllers/AccountController.html":{}}}],["createdaccount",{"_index":389,"title":{},"body":{"injectables/AccountService.html":{}}}],["createdat",{"_index":10,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountProfile.html":{},"injectables/AccountService.html":{},"injectables/AuthenticationService.html":{},"classes/UpdateAccountDTO.html":{},"miscellaneous/variables.html":{}}}],["createindexes",{"_index":1134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["credentials",{"_index":551,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["csurf",{"_index":994,"title":{},"body":{"dependencies.html":{}}}],["ctx",{"_index":443,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":445,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":446,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["custom",{"_index":413,"title":{},"body":{"injectables/AccountService.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"modules/LoggerModule.html":{},"guards/RoleGuard.html":{}}}],["customheader",{"_index":1054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customlogger",{"_index":623,"title":{"classes/CustomLogger.html":{}},"body":{"classes/CustomLogger.html":{},"modules/LoggerModule.html":{},"coverage.html":{},"index.html":{}}}],["data",{"_index":723,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["database",{"_index":600,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/MongoExceptionFilter.html":{}}}],["date",{"_index":30,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountProfile.html":{},"injectables/AccountService.html":{},"classes/UpdateAccountDTO.html":{}}}],["date('2021",{"_index":1125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date().toisostring",{"_index":66,"title":{},"body":{"classes/Account.html":{},"injectables/LoggingInterceptor.html":{}}}],["date().toutcstring",{"_index":449,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["declarations",{"_index":284,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConfigurationModule.html":{},"modules/LoggerModule.html":{},"modules/RedisModule.html":{},"modules/SessionModule.html":{},"index.html":{}}}],["decorators",{"_index":25,"title":{},"body":{"classes/Account.html":{},"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/LoginDTO.html":{},"classes/UpdateAccountDTO.html":{}}}],["default",{"_index":64,"title":{},"body":{"classes/Account.html":{},"classes/AllExceptionFilter.html":{},"injectables/ConfigurationService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["default_account_role",{"_index":360,"title":{},"body":{"injectables/AccountService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":28,"title":{},"body":{"classes/Account.html":{},"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDTO.html":{},"classes/MongoExceptionFilter.html":{},"injectables/RedisConnectService.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"guards/RoleGuard.html":{},"classes/UpdateAccountDTO.html":{},"injectables/ValidationPipe.html":{}}}],["del",{"_index":782,"title":{},"body":{"injectables/RedisPromiseService.html":{}}}],["del(key",{"_index":785,"title":{},"body":{"injectables/RedisPromiseService.html":{}}}],["delete",{"_index":116,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"miscellaneous/variables.html":{}}}],["delete('')@httpcode(httpstatus.no_content)@roles(role.user)@useguards(authguard",{"_index":198,"title":{},"body":{"controllers/AccountController.html":{}}}],["delete(':id",{"_index":185,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["delete(':id')@httpcode(httpstatus.no_content)@roles(role.admin)@useguards(authguard",{"_index":91,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["deleteaccount",{"_index":82,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"miscellaneous/variables.html":{}}}],["deleteaccount(@session",{"_index":277,"title":{},"body":{"controllers/AccountController.html":{}}}],["deleteaccount(accountid",{"_index":88,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["deleteaccount(session",{"_index":197,"title":{},"body":{"controllers/AccountController.html":{}}}],["deleteaccount(theid",{"_index":337,"title":{},"body":{"injectables/AccountService.html":{}}}],["deleteaccountreponse",{"_index":946,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["deleted",{"_index":253,"title":{},"body":{"controllers/AccountController.html":{}}}],["deletes",{"_index":249,"title":{},"body":{"controllers/AccountController.html":{}}}],["dependencies",{"_index":282,"title":{"dependencies.html":{}},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConfigurationModule.html":{},"modules/LoggerModule.html":{},"modules/RedisModule.html":{},"modules/SessionModule.html":{},"dependencies.html":{},"index.html":{}}}],["destroy",{"_index":171,"title":{},"body":{"controllers/AccountAdminController.html":{},"miscellaneous/variables.html":{}}}],["destroysession",{"_index":83,"title":{},"body":{"controllers/AccountAdminController.html":{},"injectables/AccountService.html":{},"miscellaneous/variables.html":{}}}],["destroysession(sessionid",{"_index":99,"title":{},"body":{"controllers/AccountAdminController.html":{},"injectables/AccountService.html":{}}}],["destroysessionfrommongobysessionid",{"_index":328,"title":{},"body":{"injectables/AccountService.html":{}}}],["destroysessionfrommongobysessionid(sessionid",{"_index":341,"title":{},"body":{"injectables/AccountService.html":{}}}],["destroysessionreponse",{"_index":947,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["detroysessionfrommongo",{"_index":329,"title":{},"body":{"injectables/AccountService.html":{}}}],["detroysessionfrommongo(accountid",{"_index":343,"title":{},"body":{"injectables/AccountService.html":{}}}],["development",{"_index":1081,"title":{},"body":{"miscellaneous/variables.html":{}}}],["difference",{"_index":1061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["different",{"_index":365,"title":{},"body":{"injectables/AccountService.html":{}}}],["dnt",{"_index":1052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document",{"_index":55,"title":{},"body":{"classes/Account.html":{}}}],["documentation",{"_index":926,"title":{},"body":{"coverage.html":{}}}],["dto/create",{"_index":218,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["dto/login.dto",{"_index":220,"title":{},"body":{"controllers/AccountController.html":{}}}],["dto/update",{"_index":130,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["due",{"_index":1066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["duplicate",{"_index":741,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["during",{"_index":1077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["edit",{"_index":177,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["email",{"_index":11,"title":{},"body":{"classes/Account.html":{},"controllers/AccountController.html":{},"interfaces/AccountProfile.html":{},"injectables/AccountService.html":{},"injectables/AuthenticationService.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"interfaces/Login.html":{},"classes/LoginDTO.html":{},"classes/UpdateAccountDTO.html":{},"interfaces/UserRedisSession.html":{},"miscellaneous/variables.html":{}}}],["en",{"_index":39,"title":{},"body":{"classes/Account.html":{},"miscellaneous/variables.html":{}}}],["enable",{"_index":1145,"title":{},"body":{"miscellaneous/variables.html":{}}}],["encryption",{"_index":310,"title":{},"body":{"modules/AccountModule.html":{}}}],["enumerations",{"_index":1015,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":496,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["envfilepath",{"_index":498,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":1093,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error",{"_index":235,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"classes/AllExceptionFilter.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"guards/RoleGuard.html":{}}}],["error('to",{"_index":865,"title":{},"body":{"guards/RoleGuard.html":{}}}],["error(message",{"_index":626,"title":{},"body":{"classes/CustomLogger.html":{}}}],["errorexception",{"_index":441,"title":{"classes/ErrorException.html":{}},"body":{"classes/AllExceptionFilter.html":{},"classes/ErrorException.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["errorresponse",{"_index":470,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["errors",{"_index":914,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errors.foreach((error",{"_index":919,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errors.length",{"_index":916,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["event",{"_index":842,"title":{},"body":{"injectables/RedisSubscriberService.html":{}}}],["events",{"_index":1148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ex",{"_index":1155,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exception",{"_index":432,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["exception.code",{"_index":738,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":420,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:15",{"_index":734,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["exception.filter.ts:16",{"_index":426,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.filter.ts:17",{"_index":736,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["exception.filter.ts:18",{"_index":431,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.getresponse()['validationerror",{"_index":457,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.getstatus",{"_index":454,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.message",{"_index":462,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["exception.stack",{"_index":469,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["exception/error.exception",{"_index":442,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/ValidationPipe.html":{}}}],["exceptionfilter",{"_index":732,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["exceptionstack",{"_index":468,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["excessive",{"_index":265,"title":{},"body":{"controllers/AccountController.html":{}}}],["executioncontext",{"_index":513,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/LoggingInterceptor.html":{},"guards/RoleGuard.html":{}}}],["expired.service",{"_index":874,"title":{},"body":{"modules/SessionModule.html":{}}}],["expired.service.ts",{"_index":805,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{},"coverage.html":{}}}],["expired.service.ts:12",{"_index":809,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{}}}],["expired.service.ts:6",{"_index":808,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{}}}],["export",{"_index":58,"title":{},"body":{"classes/Account.html":{},"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"interfaces/AccountProfile.html":{},"injectables/AccountService.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"interfaces/ExpressSessionUser.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Login.html":{},"classes/LoginDTO.html":{},"classes/MongoExceptionFilter.html":{},"injectables/RedisConnectService.html":{},"modules/RedisModule.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"guards/RoleGuard.html":{},"modules/SessionModule.html":{},"classes/UpdateAccountDTO.html":{},"interfaces/UserRedisSession.html":{},"injectables/ValidationPipe.html":{}}}],["exports",{"_index":287,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConfigurationModule.html":{},"modules/LoggerModule.html":{},"modules/RedisModule.html":{},"modules/SessionModule.html":{},"index.html":{}}}],["express",{"_index":437,"title":{},"body":{"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"interfaces/ExpressSessionUser.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"injectables/RedisConnectService.html":{},"guards/RoleGuard.html":{},"dependencies.html":{}}}],["expresssessionuser",{"_index":90,"title":{"interfaces/ExpressSessionUser.html":{}},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"injectables/AuthenticationService.html":{},"interfaces/ExpressSessionUser.html":{},"guards/RoleGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exsist",{"_index":1060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extends",{"_index":421,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"interfaces/ExpressSessionUser.html":{}}}],["external",{"_index":666,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["failing",{"_index":316,"title":{},"body":{"modules/AccountModule.html":{}}}],["false",{"_index":43,"title":{},"body":{"classes/Account.html":{},"miscellaneous/variables.html":{}}}],["feature",{"_index":174,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Account.html":{},"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"interfaces/AccountProfile.html":{},"injectables/AccountService.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"interfaces/ExpressSessionUser.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Login.html":{},"classes/LoginDTO.html":{},"classes/MongoExceptionFilter.html":{},"injectables/RedisConnectService.html":{},"modules/RedisModule.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"guards/RoleGuard.html":{},"modules/SessionModule.html":{},"classes/UpdateAccountDTO.html":{},"interfaces/UserRedisSession.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["filter",{"_index":670,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["filteredaccountdetails",{"_index":379,"title":{},"body":{"injectables/AccountService.html":{}}}],["filteredaccountdetails.email",{"_index":382,"title":{},"body":{"injectables/AccountService.html":{}}}],["filteredheaders",{"_index":685,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["filternewaccountdetails",{"_index":396,"title":{},"body":{"injectables/AccountService.html":{}}}],["filterrequestbody",{"_index":708,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["find",{"_index":368,"title":{},"body":{"injectables/AccountService.html":{},"injectables/LoggingInterceptor.html":{}}}],["findbyid(theid",{"_index":378,"title":{},"body":{"injectables/AccountService.html":{}}}],["findone",{"_index":546,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["firstname",{"_index":12,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountProfile.html":{},"injectables/AccountService.html":{},"injectables/AuthenticationService.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/UpdateAccountDTO.html":{},"interfaces/UserRedisSession.html":{},"miscellaneous/variables.html":{}}}],["fn",{"_index":840,"title":{},"body":{"injectables/RedisSubscriberService.html":{},"miscellaneous/variables.html":{}}}],["fn(channel",{"_index":849,"title":{},"body":{"injectables/RedisSubscriberService.html":{}}}],["format('sss",{"_index":716,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["formattederrors",{"_index":918,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["formattederrors.push(...object.values(error.constraints",{"_index":920,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["forwarded",{"_index":701,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["found",{"_index":240,"title":{},"body":{"controllers/AccountController.html":{}}}],["fromip",{"_index":699,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["function",{"_index":902,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["functions",{"_index":1018,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["future",{"_index":395,"title":{},"body":{"injectables/AccountService.html":{},"injectables/LoggingInterceptor.html":{},"classes/UpdateAccountDTO.html":{}}}],["gao",{"_index":602,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{}}}],["gender",{"_index":13,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountProfile.html":{},"injectables/AccountService.html":{},"injectables/AuthenticationService.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/UpdateAccountDTO.html":{},"interfaces/UserRedisSession.html":{},"miscellaneous/variables.html":{}}}],["get('')@httpcode(httpstatus.ok)@roles(role.admin)@useguards(authguard",{"_index":109,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["get('')@httpcode(httpstatus.ok)@roles(role.user)@useguards(authguard",{"_index":201,"title":{},"body":{"controllers/AccountController.html":{}}}],["get(':id",{"_index":156,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["get(':id')@httpcode(httpstatus.ok)@roles(role.admin)@useguards(authguard",{"_index":104,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["get('destroysession/:id",{"_index":162,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["get('destroysession/:id')@httpcode(httpstatus.ok)@roles(role.admin)@useguards(authguard",{"_index":100,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["get('getaccountbyredissessionid/:redissessionid",{"_index":159,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["get('getaccountbyredissessionid/:redissessionid')@httpcode(httpstatus.ok)@roles(role.admin)@useguards(authguard",{"_index":107,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["get('logout",{"_index":226,"title":{},"body":{"controllers/AccountController.html":{}}}],["get('logout')@httpcode(httpstatus.ok)@roles(role.user",{"_index":209,"title":{},"body":{"controllers/AccountController.html":{}}}],["get(configname",{"_index":563,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["get(key",{"_index":787,"title":{},"body":{"injectables/RedisPromiseService.html":{}}}],["getaccountbyid",{"_index":84,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"miscellaneous/variables.html":{}}}],["getaccountbyid(accountid",{"_index":103,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["getaccountbyid(session",{"_index":200,"title":{},"body":{"controllers/AccountController.html":{}}}],["getaccountbyid(theid",{"_index":345,"title":{},"body":{"injectables/AccountService.html":{}}}],["getaccountbyidreponse",{"_index":948,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getaccountbyredissessionid",{"_index":85,"title":{},"body":{"controllers/AccountAdminController.html":{},"injectables/AccountService.html":{},"miscellaneous/variables.html":{}}}],["getaccountbyredissessionid(sessionid",{"_index":106,"title":{},"body":{"controllers/AccountAdminController.html":{},"injectables/AccountService.html":{}}}],["getaccountbyredissessionidreponse",{"_index":949,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getallaccounts",{"_index":86,"title":{},"body":{"controllers/AccountAdminController.html":{},"injectables/AccountService.html":{},"miscellaneous/variables.html":{}}}],["getallaccountsreponse",{"_index":950,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getredissession",{"_index":750,"title":{},"body":{"injectables/RedisConnectService.html":{}}}],["getters",{"_index":61,"title":{},"body":{"classes/Account.html":{}}}],["given",{"_index":399,"title":{},"body":{"injectables/AccountService.html":{}}}],["global",{"_index":531,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/ConfigurationModule.html":{}}}],["guard",{"_index":504,"title":{"guards/AuthGuard.html":{},"guards/RoleGuard.html":{}},"body":{"coverage.html":{}}}],["guard/auth.guard",{"_index":125,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{}}}],["guard/role/role.decorator",{"_index":127,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{}}}],["guard/role/role.enum",{"_index":128,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{}}}],["guard/role/role.guard",{"_index":129,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{}}}],["guards",{"_index":505,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RoleGuard.html":{},"index.html":{}}}],["handler",{"_index":236,"title":{},"body":{"controllers/AccountController.html":{}}}],["hash",{"_index":1098,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashedpassword",{"_index":386,"title":{},"body":{"injectables/AccountService.html":{}}}],["hashpassword",{"_index":355,"title":{},"body":{"injectables/AccountService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hashpassword(filteredaccountdetails.password",{"_index":387,"title":{},"body":{"injectables/AccountService.html":{}}}],["head",{"_index":1045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["headers",{"_index":681,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["helmet",{"_index":998,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":1065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hide",{"_index":688,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["hook",{"_index":313,"title":{},"body":{"modules/AccountModule.html":{}}}],["host",{"_index":429,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":444,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["http",{"_index":439,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"dependencies.html":{}}}],["httpcode",{"_index":117,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{}}}],["httpcode(httpstatus.created",{"_index":231,"title":{},"body":{"controllers/AccountController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":186,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{}}}],["httpcode(httpstatus.ok",{"_index":150,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{}}}],["httpcontext",{"_index":438,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["httpcontext.get('correlationid",{"_index":451,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["httpcontext.set('correlationid",{"_index":1163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpexception",{"_index":428,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/ErrorException.html":{}}}],["httponly",{"_index":1082,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://dev.to/avantar/custom",{"_index":599,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{}}}],["https://image.flaticon.com/icons/png/512/2922/2922688.png",{"_index":27,"title":{},"body":{"classes/Account.html":{},"miscellaneous/variables.html":{}}}],["https://medium.com/@micah1powell/using",{"_index":812,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{}}}],["https://noahkreiger.medium.com/nodejs",{"_index":794,"title":{},"body":{"injectables/RedisPromiseService.html":{}}}],["https://stackoverflow.com/questions/19215042/express",{"_index":675,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["https://stackoverflow.com/questions/62553953/nest",{"_index":314,"title":{},"body":{"modules/AccountModule.html":{}}}],["https://stackoverflow.com/questions/62986974/how",{"_index":819,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{}}}],["https://www.coreycleary.me/should",{"_index":664,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["https://www.moesif.com/blog/technical/logging/how",{"_index":656,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["https:stackoverflow.com/questions/58682974/listen",{"_index":1150,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpstatus",{"_index":118,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"classes/AllExceptionFilter.html":{},"classes/ErrorException.html":{},"classes/MongoExceptionFilter.html":{}}}],["httpstatus.bad_request",{"_index":634,"title":{},"body":{"classes/ErrorException.html":{}}}],["httpstatus.internal_server_error",{"_index":455,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["httpversion",{"_index":682,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["id",{"_index":173,"title":{},"body":{"controllers/AccountAdminController.html":{},"interfaces/AccountProfile.html":{},"injectables/AccountService.html":{},"interfaces/UserRedisSession.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":927,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":520,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"guards/RoleGuard.html":{},"injectables/ValidationPipe.html":{}}}],["import",{"_index":51,"title":{},"body":{"classes/Account.html":{},"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"interfaces/ExpressSessionUser.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDTO.html":{},"classes/MongoExceptionFilter.html":{},"injectables/RedisConnectService.html":{},"modules/RedisModule.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"guards/RoleGuard.html":{},"modules/SessionModule.html":{},"classes/UpdateAccountDTO.html":{},"injectables/ValidationPipe.html":{}}}],["imports",{"_index":299,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/RedisModule.html":{},"modules/SessionModule.html":{}}}],["incoming",{"_index":696,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["incomingrequestto",{"_index":695,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/Account.html":{},"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"interfaces/AccountProfile.html":{},"injectables/AccountService.html":{},"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/CustomLogger.html":{},"interfaces/ExpressSessionUser.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Login.html":{},"classes/LoginDTO.html":{},"classes/MongoExceptionFilter.html":{},"injectables/RedisConnectService.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"guards/RoleGuard.html":{},"classes/UpdateAccountDTO.html":{},"interfaces/UserRedisSession.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Account.html":{},"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"interfaces/AccountProfile.html":{},"injectables/AccountService.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"interfaces/ExpressSessionUser.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Login.html":{},"classes/LoginDTO.html":{},"classes/MongoExceptionFilter.html":{},"injectables/RedisConnectService.html":{},"modules/RedisModule.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"guards/RoleGuard.html":{},"modules/SessionModule.html":{},"classes/UpdateAccountDTO.html":{},"interfaces/UserRedisSession.html":{},"injectables/ValidationPipe.html":{}}}],["information",{"_index":179,"title":{},"body":{"controllers/AccountAdminController.html":{},"injectables/AccountService.html":{}}}],["inherited",{"_index":614,"title":{},"body":{"classes/CreateAccountRoleDTO.html":{}}}],["inject",{"_index":756,"title":{},"body":{"injectables/RedisConnectService.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscriberService.html":{},"miscellaneous/variables.html":{}}}],["inject(redis_client",{"_index":762,"title":{},"body":{"injectables/RedisConnectService.html":{}}}],["inject(redis_subscriber_client",{"_index":846,"title":{},"body":{"injectables/RedisSubscriberService.html":{}}}],["injectable",{"_index":325,"title":{"injectables/AccountService.html":{},"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/RedisConnectService.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"injectables/ValidationPipe.html":{}},"body":{"injectables/AccountService.html":{},"guards/AuthGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/RedisConnectService.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"guards/RoleGuard.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["injectables",{"_index":326,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/RedisConnectService.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"injectables/ValidationPipe.html":{},"index.html":{}}}],["injectmodel",{"_index":353,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthenticationService.html":{}}}],["injectmodel(account.name",{"_index":362,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthenticationService.html":{}}}],["instanceof",{"_index":453,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["intercept",{"_index":643,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["intercept(context",{"_index":644,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["interceptor",{"_index":673,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["interface",{"_index":320,"title":{"interfaces/AccountProfile.html":{},"interfaces/ExpressSessionUser.html":{},"interfaces/Login.html":{},"interfaces/UserRedisSession.html":{}},"body":{"interfaces/AccountProfile.html":{},"interfaces/ExpressSessionUser.html":{},"interfaces/Login.html":{},"interfaces/UserRedisSession.html":{},"coverage.html":{}}}],["interface/account",{"_index":133,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["interface/express",{"_index":137,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["interface/login.interface",{"_index":544,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["interface/user",{"_index":142,"title":{},"body":{"controllers/AccountAdminController.html":{},"injectables/AccountService.html":{}}}],["interfaces",{"_index":321,"title":{},"body":{"interfaces/AccountProfile.html":{},"interfaces/ExpressSessionUser.html":{},"interfaces/Login.html":{},"interfaces/UserRedisSession.html":{},"index.html":{}}}],["internal",{"_index":460,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["invalid",{"_index":410,"title":{},"body":{"injectables/AccountService.html":{}}}],["ioredis",{"_index":1000,"title":{},"body":{"dependencies.html":{}}}],["isaccounttaken",{"_index":356,"title":{},"body":{"injectables/AccountService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isdate",{"_index":893,"title":{},"body":{"classes/UpdateAccountDTO.html":{}}}],["isdate()@isoptional",{"_index":878,"title":{},"body":{"classes/UpdateAccountDTO.html":{}}}],["isemail",{"_index":591,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/LoginDTO.html":{},"classes/UpdateAccountDTO.html":{}}}],["isemail()@maxlength(50",{"_index":576,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/LoginDTO.html":{}}}],["isemail()@maxlength(50)@isoptional",{"_index":880,"title":{},"body":{"classes/UpdateAccountDTO.html":{}}}],["isglobal",{"_index":500,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":592,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/UpdateAccountDTO.html":{}}}],["isin(['en",{"_index":610,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/UpdateAccountDTO.html":{}}}],["isin(['female",{"_index":607,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/UpdateAccountDTO.html":{}}}],["isoptional",{"_index":593,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/UpdateAccountDTO.html":{}}}],["isstring",{"_index":594,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/LoginDTO.html":{},"classes/UpdateAccountDTO.html":{}}}],["isstring()@isin(undefined",{"_index":581,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{}}}],["isstring()@isin(undefined)@isoptional",{"_index":884,"title":{},"body":{"classes/UpdateAccountDTO.html":{}}}],["isstring()@length(0",{"_index":578,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/UpdateAccountDTO.html":{}}}],["isstring()@length(11",{"_index":588,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/UpdateAccountDTO.html":{}}}],["isstring()@length(8",{"_index":585,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/LoginDTO.html":{},"classes/UpdateAccountDTO.html":{}}}],["isstring()@maxlength(200)@isoptional",{"_index":574,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/UpdateAccountDTO.html":{}}}],["issue",{"_index":251,"title":{},"body":{"controllers/AccountController.html":{}}}],["jest",{"_index":1106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn",{"_index":1115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn().mockresolvedvalue(createaccountreponse",{"_index":1109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn().mockresolvedvalue(deleteaccountreponse",{"_index":1111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn().mockresolvedvalue(destroysessionreponse",{"_index":1112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn().mockresolvedvalue(getaccountbyidreponse",{"_index":1108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn().mockresolvedvalue(getallaccountsreponse",{"_index":1105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn().mockresolvedvalue(updateaccountreponse",{"_index":1110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["johnathan",{"_index":1120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["js",{"_index":315,"title":{},"body":{"modules/AccountModule.html":{}}}],["json.parse",{"_index":372,"title":{},"body":{"injectables/AccountService.html":{}}}],["json.parse(sessionstring",{"_index":415,"title":{},"body":{"injectables/AccountService.html":{}}}],["kay",{"_index":1119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kay@gmail.com",{"_index":1121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keep",{"_index":1055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["key",{"_index":371,"title":{},"body":{"injectables/AccountService.html":{},"classes/MongoExceptionFilter.html":{},"injectables/RedisPromiseService.html":{}}}],["keyspace",{"_index":813,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{},"miscellaneous/variables.html":{}}}],["language",{"_index":15,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountProfile.html":{},"injectables/AccountService.html":{},"injectables/AuthenticationService.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/UpdateAccountDTO.html":{},"miscellaneous/variables.html":{}}}],["lastname",{"_index":16,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountProfile.html":{},"injectables/AccountService.html":{},"injectables/AuthenticationService.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/UpdateAccountDTO.html":{},"interfaces/UserRedisSession.html":{},"miscellaneous/variables.html":{}}}],["later",{"_index":745,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["lean",{"_index":370,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthenticationService.html":{}}}],["legend",{"_index":283,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConfigurationModule.html":{},"modules/LoggerModule.html":{},"modules/RedisModule.html":{},"modules/SessionModule.html":{},"index.html":{}}}],["legitimate",{"_index":243,"title":{},"body":{"controllers/AccountController.html":{}}}],["length",{"_index":595,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/LoginDTO.html":{},"classes/UpdateAccountDTO.html":{}}}],["length(0",{"_index":603,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/UpdateAccountDTO.html":{}}}],["length(11",{"_index":606,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/UpdateAccountDTO.html":{}}}],["length(8",{"_index":604,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/LoginDTO.html":{},"classes/UpdateAccountDTO.html":{}}}],["limitations",{"_index":176,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["list",{"_index":1152,"title":{},"body":{"miscellaneous/variables.html":{}}}],["load",{"_index":499,"title":{},"body":{"modules/AppModule.html":{}}}],["lodash",{"_index":215,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"injectables/AuthenticationService.html":{},"injectables/LoggingInterceptor.html":{},"dependencies.html":{}}}],["lodash.omit(account",{"_index":275,"title":{},"body":{"controllers/AccountController.html":{}}}],["lodash.omit(headers",{"_index":686,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["lodash.pick",{"_index":393,"title":{},"body":{"injectables/AccountService.html":{}}}],["lodash.pick(account",{"_index":552,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["lodash.pick(createaccountdto",{"_index":380,"title":{},"body":{"injectables/AccountService.html":{}}}],["lodash.pick(createdaccount",{"_index":397,"title":{},"body":{"injectables/AccountService.html":{}}}],["log",{"_index":660,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["logger",{"_index":119,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"classes/AllExceptionFilter.html":{},"classes/CustomLogger.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger('main",{"_index":1104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger(accountadmincontroller.name",{"_index":148,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["logger(accountcontroller.name",{"_index":222,"title":{},"body":{"controllers/AccountController.html":{}}}],["logger(allexceptionfilter.name",{"_index":425,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["logger(logginginterceptor.name",{"_index":648,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["logger(mongoexceptionfilter.name",{"_index":733,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["logger.logger",{"_index":640,"title":{},"body":{"modules/LoggerModule.html":{}}}],["logger.logger.ts",{"_index":625,"title":{},"body":{"classes/CustomLogger.html":{},"coverage.html":{}}}],["logger.logger.ts:4",{"_index":628,"title":{},"body":{"classes/CustomLogger.html":{}}}],["logger/logger.module",{"_index":306,"title":{},"body":{"modules/AccountModule.html":{}}}],["loggererrorresponse",{"_index":472,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["loggermodule",{"_index":293,"title":{"modules/LoggerModule.html":{}},"body":{"modules/AccountModule.html":{},"modules/LoggerModule.html":{},"index.html":{},"modules.html":{}}}],["logging",{"_index":676,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["logginginterceptor",{"_index":641,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["login",{"_index":191,"title":{"interfaces/Login.html":{}},"body":{"controllers/AccountController.html":{},"injectables/AuthenticationService.html":{},"interfaces/Login.html":{},"coverage.html":{}}}],["login(logindto",{"_index":203,"title":{},"body":{"controllers/AccountController.html":{}}}],["login(undefined",{"_index":536,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["logindto",{"_index":204,"title":{"classes/LoginDTO.html":{}},"body":{"controllers/AccountController.html":{},"classes/LoginDTO.html":{},"coverage.html":{}}}],["logout",{"_index":192,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AuthenticationService.html":{}}}],["logout(@session",{"_index":228,"title":{},"body":{"controllers/AccountController.html":{}}}],["logout(session",{"_index":538,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["logout(thesession",{"_index":208,"title":{},"body":{"controllers/AccountController.html":{}}}],["lots",{"_index":391,"title":{},"body":{"injectables/AccountService.html":{}}}],["make",{"_index":820,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{}}}],["male",{"_index":608,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/UpdateAccountDTO.html":{},"miscellaneous/variables.html":{}}}],["manager",{"_index":667,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["matching",{"_index":71,"title":{},"body":{"classes/Account.html":{},"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"interfaces/AccountProfile.html":{},"injectables/AccountService.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"interfaces/ExpressSessionUser.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Login.html":{},"classes/LoginDTO.html":{},"classes/MongoExceptionFilter.html":{},"injectables/RedisConnectService.html":{},"modules/RedisModule.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"guards/RoleGuard.html":{},"modules/SessionModule.html":{},"classes/UpdateAccountDTO.html":{},"interfaces/UserRedisSession.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxage",{"_index":1062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maxlength",{"_index":596,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/LoginDTO.html":{},"classes/UpdateAccountDTO.html":{}}}],["maxlength(200",{"_index":609,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/UpdateAccountDTO.html":{}}}],["maxlength(50",{"_index":605,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/LoginDTO.html":{},"classes/UpdateAccountDTO.html":{}}}],["message",{"_index":471,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CustomLogger.html":{},"classes/MongoExceptionFilter.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{}}}],["message.split(':')[1",{"_index":836,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{}}}],["metadata",{"_index":1007,"title":{},"body":{"dependencies.html":{}}}],["metatype",{"_index":904,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["method",{"_index":464,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{}}}],["methods",{"_index":80,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"classes/CustomLogger.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"injectables/RedisConnectService.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"guards/RoleGuard.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["middleware",{"_index":659,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["millisecond",{"_index":1086,"title":{},"body":{"miscellaneous/variables.html":{}}}],["minute",{"_index":1088,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":1014,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mockaccountservice",{"_index":953,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockcookie",{"_index":954,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockresolvedvalue(getaccountbyredissessionidreponse",{"_index":1107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mocksession",{"_index":955,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockupdateuser",{"_index":956,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockuser",{"_index":957,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["model",{"_index":332,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthenticationService.html":{},"miscellaneous/variables.html":{}}}],["modified",{"_index":1058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modify",{"_index":363,"title":{},"body":{"injectables/AccountService.html":{}}}],["module",{"_index":279,"title":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConfigurationModule.html":{},"modules/LoggerModule.html":{},"modules/RedisModule.html":{},"modules/SessionModule.html":{}},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConfigurationModule.html":{},"modules/LoggerModule.html":{},"modules/RedisModule.html":{},"modules/SessionModule.html":{},"index.html":{}}}],["module/account/account.module",{"_index":486,"title":{},"body":{"modules/AppModule.html":{},"modules/SessionModule.html":{}}}],["module/account/account.service",{"_index":810,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{}}}],["module/account/interface/express",{"_index":855,"title":{},"body":{"guards/RoleGuard.html":{}}}],["module/authentication/authentication.module",{"_index":487,"title":{},"body":{"modules/AppModule.html":{}}}],["module/mongoose/mongoose.configuration",{"_index":489,"title":{},"body":{"modules/AppModule.html":{}}}],["module/mongoose/mongoose.provider",{"_index":491,"title":{},"body":{"modules/AppModule.html":{}}}],["module/redis/redis.configuration",{"_index":493,"title":{},"body":{"modules/AppModule.html":{}}}],["module/redis/redis.module",{"_index":873,"title":{},"body":{"modules/SessionModule.html":{}}}],["module/redis/service/redis",{"_index":811,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{}}}],["module/session/session.module",{"_index":494,"title":{},"body":{"modules/AppModule.html":{}}}],["modules",{"_index":281,"title":{"modules.html":{}},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConfigurationModule.html":{},"modules/LoggerModule.html":{},"modules/RedisModule.html":{},"modules/SessionModule.html":{},"index.html":{},"modules.html":{}}}],["moment",{"_index":57,"title":{},"body":{"classes/Account.html":{},"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"dependencies.html":{}}}],["mongodb",{"_index":501,"title":{},"body":{"modules/AppModule.html":{},"classes/MongoExceptionFilter.html":{},"injectables/RedisSubscribeExpiredService.html":{}}}],["mongoerror",{"_index":735,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["mongoexceptionfilter",{"_index":730,"title":{"classes/MongoExceptionFilter.html":{}},"body":{"classes/MongoExceptionFilter.html":{},"coverage.html":{}}}],["mongoose",{"_index":56,"title":{},"body":{"classes/Account.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"modules/AppModule.html":{},"injectables/AuthenticationService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["mongooseclient",{"_index":490,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mongooseconfiguration",{"_index":488,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mongoosemodule",{"_index":300,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/AuthenticationModule.html":{}}}],["mongoosemodule.forfeature",{"_index":318,"title":{},"body":{"modules/AccountModule.html":{},"modules/AuthenticationModule.html":{}}}],["mongoosemodule.forrootasync(mongooseclient",{"_index":503,"title":{},"body":{"modules/AppModule.html":{}}}],["moving",{"_index":309,"title":{},"body":{"modules/AccountModule.html":{}}}],["ms",{"_index":612,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/UpdateAccountDTO.html":{}}}],["name",{"_index":95,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"injectables/RedisConnectService.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"guards/RoleGuard.html":{},"injectables/ValidationPipe.html":{}}}],["nestinterceptor",{"_index":650,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["nestjs",{"_index":601,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{}}}],["nestjs/common",{"_index":123,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"injectables/RedisConnectService.html":{},"modules/RedisModule.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"guards/RoleGuard.html":{},"modules/SessionModule.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":482,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/ConfigurationService.html":{},"modules/RedisModule.html":{},"guards/RoleGuard.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":434,"title":{},"body":{"classes/AllExceptionFilter.html":{},"guards/RoleGuard.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":54,"title":{},"body":{"classes/Account.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":976,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":65,"title":{},"body":{"classes/Account.html":{},"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"classes/AllExceptionFilter.html":{},"injectables/AuthenticationService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"injectables/RedisConnectService.html":{},"guards/RoleGuard.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newaccount",{"_index":388,"title":{},"body":{"injectables/AccountService.html":{}}}],["next",{"_index":645,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["next.handle().pipe",{"_index":712,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["node",{"_index":817,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{}}}],["nodejs",{"_index":658,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["notifications",{"_index":814,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{}}}],["notify",{"_index":1154,"title":{},"body":{"miscellaneous/variables.html":{}}}],["now",{"_index":256,"title":{},"body":{"controllers/AccountController.html":{}}}],["null",{"_index":405,"title":{},"body":{"injectables/AccountService.html":{}}}],["number",{"_index":922,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["object",{"_index":566,"title":{},"body":{"injectables/ConfigurationService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["observable",{"_index":651,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["oldpassword",{"_index":1100,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on(event",{"_index":839,"title":{},"body":{"injectables/RedisSubscriberService.html":{}}}],["one",{"_index":267,"title":{},"body":{"controllers/AccountController.html":{}}}],["operation",{"_index":172,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["option",{"_index":1146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":14,"title":{},"body":{"classes/Account.html":{},"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"interfaces/AccountProfile.html":{},"injectables/AccountService.html":{},"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"interfaces/ExpressSessionUser.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"injectables/RedisConnectService.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"guards/RoleGuard.html":{},"classes/UpdateAccountDTO.html":{},"interfaces/UserRedisSession.html":{},"injectables/ValidationPipe.html":{}}}],["options",{"_index":1064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["origin",{"_index":1044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["originalmaxage",{"_index":1113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["originalurl",{"_index":702,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["out",{"_index":297,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConfigurationModule.html":{},"modules/LoggerModule.html":{},"modules/RedisModule.html":{},"modules/SessionModule.html":{},"index.html":{}}}],["outgoing",{"_index":718,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["outgoingresponsefrom",{"_index":717,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["overview",{"_index":1020,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":972,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":120,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["param('id",{"_index":157,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["param('redissessionid",{"_index":160,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["parameters",{"_index":94,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"injectables/RedisConnectService.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"guards/RoleGuard.html":{},"injectables/ValidationPipe.html":{}}}],["password",{"_index":17,"title":{},"body":{"classes/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"interfaces/AccountProfile.html":{},"injectables/AccountService.html":{},"injectables/AuthenticationService.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Login.html":{},"classes/LoginDTO.html":{},"classes/UpdateAccountDTO.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":1046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["path",{"_index":466,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["performing",{"_index":170,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["performs",{"_index":262,"title":{},"body":{"controllers/AccountController.html":{}}}],["phone",{"_index":18,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountProfile.html":{},"injectables/AccountService.html":{},"injectables/AuthenticationService.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/UpdateAccountDTO.html":{},"interfaces/UserRedisSession.html":{},"miscellaneous/variables.html":{}}}],["pipe/validation.pipe",{"_index":140,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{}}}],["pipetransform",{"_index":908,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["place",{"_index":175,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["plaintoclass",{"_index":909,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass(metatype",{"_index":913,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["please",{"_index":743,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["port",{"_index":1095,"title":{},"body":{"miscellaneous/variables.html":{}}}],["possibly",{"_index":308,"title":{},"body":{"modules/AccountModule.html":{}}}],["post",{"_index":214,"title":{},"body":{"controllers/AccountController.html":{},"miscellaneous/variables.html":{}}}],["post('login",{"_index":233,"title":{},"body":{"controllers/AccountController.html":{}}}],["post('login')@httpcode(httpstatus.ok",{"_index":206,"title":{},"body":{"controllers/AccountController.html":{}}}],["post()@httpcode(httpstatus.created",{"_index":195,"title":{},"body":{"controllers/AccountController.html":{}}}],["practice",{"_index":1076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pre",{"_index":311,"title":{},"body":{"modules/AccountModule.html":{}}}],["prefix",{"_index":78,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"injectables/RedisSubscribeExpiredService.html":{}}}],["previously",{"_index":252,"title":{},"body":{"controllers/AccountController.html":{}}}],["private",{"_index":146,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"injectables/RedisConnectService.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"guards/RoleGuard.html":{},"injectables/ValidationPipe.html":{}}}],["problem",{"_index":241,"title":{},"body":{"controllers/AccountController.html":{}}}],["process.env.express_session_secret",{"_index":1092,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mongo_database_uri",{"_index":1135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":1094,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.redis_host",{"_index":1156,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.redis_password",{"_index":1158,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.redis_port",{"_index":1157,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.server_port",{"_index":1096,"title":{},"body":{"miscellaneous/variables.html":{}}}],["processingtime",{"_index":714,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["produced",{"_index":1149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":1078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["profile.dto",{"_index":131,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["profile.dto.ts",{"_index":876,"title":{},"body":{"classes/UpdateAccountDTO.html":{},"coverage.html":{}}}],["profile.dto.ts:15",{"_index":883,"title":{},"body":{"classes/UpdateAccountDTO.html":{}}}],["profile.dto.ts:20",{"_index":887,"title":{},"body":{"classes/UpdateAccountDTO.html":{}}}],["profile.dto.ts:25",{"_index":889,"title":{},"body":{"classes/UpdateAccountDTO.html":{}}}],["profile.dto.ts:30",{"_index":881,"title":{},"body":{"classes/UpdateAccountDTO.html":{}}}],["profile.dto.ts:35",{"_index":891,"title":{},"body":{"classes/UpdateAccountDTO.html":{}}}],["profile.dto.ts:40",{"_index":885,"title":{},"body":{"classes/UpdateAccountDTO.html":{}}}],["profile.dto.ts:45",{"_index":877,"title":{},"body":{"classes/UpdateAccountDTO.html":{}}}],["profile.dto.ts:50",{"_index":886,"title":{},"body":{"classes/UpdateAccountDTO.html":{}}}],["profile.dto.ts:55",{"_index":879,"title":{},"body":{"classes/UpdateAccountDTO.html":{}}}],["profile.dto.ts:59",{"_index":892,"title":{},"body":{"classes/UpdateAccountDTO.html":{}}}],["profile.interface",{"_index":134,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"injectables/AuthenticationService.html":{},"interfaces/ExpressSessionUser.html":{}}}],["profile.interface.ts",{"_index":323,"title":{},"body":{"interfaces/AccountProfile.html":{},"coverage.html":{}}}],["promise",{"_index":98,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"guards/AuthGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"guards/RoleGuard.html":{},"miscellaneous/variables.html":{}}}],["promise.service",{"_index":359,"title":{},"body":{"injectables/AccountService.html":{},"modules/RedisModule.html":{}}}],["promise.service.ts",{"_index":781,"title":{},"body":{"injectables/RedisPromiseService.html":{},"coverage.html":{}}}],["promise.service.ts:13",{"_index":788,"title":{},"body":{"injectables/RedisPromiseService.html":{}}}],["promise.service.ts:18",{"_index":790,"title":{},"body":{"injectables/RedisPromiseService.html":{}}}],["promise.service.ts:23",{"_index":786,"title":{},"body":{"injectables/RedisPromiseService.html":{}}}],["promise.service.ts:8",{"_index":784,"title":{},"body":{"injectables/RedisPromiseService.html":{}}}],["promisify",{"_index":791,"title":{},"body":{"injectables/RedisPromiseService.html":{},"injectables/RedisSubscriberService.html":{}}}],["promisify(this.client.del).bind(this.client",{"_index":801,"title":{},"body":{"injectables/RedisPromiseService.html":{}}}],["promisify(this.client.get).bind(this.client",{"_index":799,"title":{},"body":{"injectables/RedisPromiseService.html":{}}}],["promisify(this.client.set).bind(this.client",{"_index":800,"title":{},"body":{"injectables/RedisPromiseService.html":{}}}],["promisify(this.client.subscribe).bind(this.client",{"_index":847,"title":{},"body":{"injectables/RedisSubscriberService.html":{}}}],["prop",{"_index":49,"title":{},"body":{"classes/Account.html":{}}}],["prop({default",{"_index":26,"title":{},"body":{"classes/Account.html":{}}}],["prop({required",{"_index":33,"title":{},"body":{"classes/Account.html":{}}}],["prop({select",{"_index":46,"title":{},"body":{"classes/Account.html":{}}}],["properties",{"_index":8,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountProfile.html":{},"classes/AllExceptionFilter.html":{},"injectables/ConfigurationService.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"interfaces/ExpressSessionUser.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Login.html":{},"classes/LoginDTO.html":{},"classes/MongoExceptionFilter.html":{},"classes/UpdateAccountDTO.html":{},"interfaces/UserRedisSession.html":{}}}],["provide",{"_index":1136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provider/redis",{"_index":778,"title":{},"body":{"modules/RedisModule.html":{},"injectables/RedisSubscriberService.html":{}}}],["provider/redis.provider",{"_index":758,"title":{},"body":{"injectables/RedisConnectService.html":{},"modules/RedisModule.html":{},"injectables/RedisPromiseService.html":{}}}],["providers",{"_index":286,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConfigurationModule.html":{},"modules/LoggerModule.html":{},"modules/RedisModule.html":{},"modules/SessionModule.html":{},"index.html":{}}}],["put",{"_index":121,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"miscellaneous/variables.html":{}}}],["put('')@httpcode(httpstatus.ok)@roles(role.user)@useguards(authguard",{"_index":212,"title":{},"body":{"controllers/AccountController.html":{}}}],["put(':id",{"_index":180,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["put(':id')@httpcode(httpstatus.ok)@roles(role.admin)@useguards(authguard",{"_index":113,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["rawheaders",{"_index":679,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["readonly",{"_index":147,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"classes/AllExceptionFilter.html":{},"injectables/AuthenticationService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"injectables/RedisConnectService.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"guards/RoleGuard.html":{}}}],["receive",{"_index":1147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redis",{"_index":143,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"injectables/RedisConnectService.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"modules/SessionModule.html":{},"interfaces/UserRedisSession.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["redis(redisclientoptions",{"_index":1144,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redis.createclient(redisclientoptions",{"_index":1142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redis.redis",{"_index":1143,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redis/redis.module",{"_index":302,"title":{},"body":{"modules/AccountModule.html":{},"modules/AuthenticationModule.html":{}}}],["redis/service/redis",{"_index":358,"title":{},"body":{"injectables/AccountService.html":{}}}],["redis_client",{"_index":757,"title":{},"body":{"injectables/RedisConnectService.html":{},"injectables/RedisPromiseService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["redis_subscriber_client",{"_index":845,"title":{},"body":{"injectables/RedisSubscriberService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["redisclient",{"_index":752,"title":{},"body":{"injectables/RedisConnectService.html":{},"modules/RedisModule.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscriberService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["redisclientoptions",{"_index":1137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redisconfiguration",{"_index":492,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["redisconnectservice",{"_index":747,"title":{"injectables/RedisConnectService.html":{}},"body":{"injectables/RedisConnectService.html":{},"modules/RedisModule.html":{},"coverage.html":{},"index.html":{}}}],["redismodule",{"_index":294,"title":{"modules/RedisModule.html":{}},"body":{"modules/AccountModule.html":{},"modules/AuthenticationModule.html":{},"modules/RedisModule.html":{},"modules/SessionModule.html":{},"index.html":{},"modules.html":{}}}],["redispromiseservice",{"_index":333,"title":{"injectables/RedisPromiseService.html":{}},"body":{"injectables/AccountService.html":{},"modules/RedisModule.html":{},"injectables/RedisPromiseService.html":{},"coverage.html":{},"index.html":{}}}],["redissessionid",{"_index":19,"title":{},"body":{"classes/Account.html":{},"injectables/AccountService.html":{},"interfaces/UserRedisSession.html":{}}}],["redisstore",{"_index":763,"title":{},"body":{"injectables/RedisConnectService.html":{},"miscellaneous/variables.html":{}}}],["redissubscribeexpiredservice",{"_index":802,"title":{"injectables/RedisSubscribeExpiredService.html":{}},"body":{"injectables/RedisSubscribeExpiredService.html":{},"modules/SessionModule.html":{},"coverage.html":{},"index.html":{}}}],["redissubscriberclient",{"_index":777,"title":{},"body":{"modules/RedisModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["redissubscriberservice",{"_index":773,"title":{"injectables/RedisSubscriberService.html":{}},"body":{"modules/RedisModule.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"coverage.html":{},"index.html":{}}}],["refactor",{"_index":394,"title":{},"body":{"injectables/AccountService.html":{},"injectables/LoggingInterceptor.html":{}}}],["referer",{"_index":703,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["reflect",{"_index":1006,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":852,"title":{},"body":{"guards/RoleGuard.html":{}}}],["regenerate",{"_index":1114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reload",{"_index":1116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reminder",{"_index":815,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{}}}],["remoteaddress",{"_index":691,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["remotefamily",{"_index":692,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["remove",{"_index":894,"title":{},"body":{"classes/UpdateAccountDTO.html":{}}}],["repeated",{"_index":392,"title":{},"body":{"injectables/AccountService.html":{},"injectables/LoggingInterceptor.html":{}}}],["repeatedly",{"_index":261,"title":{},"body":{"controllers/AccountController.html":{}}}],["replaced",{"_index":412,"title":{},"body":{"injectables/AccountService.html":{},"guards/RoleGuard.html":{}}}],["req",{"_index":665,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["req.correlationid",{"_index":1162,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request",{"_index":435,"title":{},"body":{"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"guards/RoleGuard.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization?.split",{"_index":1164,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.headers.referer",{"_index":704,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["request.headers['user",{"_index":706,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["request.headers['x",{"_index":700,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["request.method",{"_index":465,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["request.originalurl",{"_index":467,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["request.session",{"_index":863,"title":{},"body":{"guards/RoleGuard.html":{}}}],["request.session['userid",{"_index":525,"title":{},"body":{"guards/AuthGuard.html":{}}}],["request['correlationid",{"_index":694,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["request['route']['path",{"_index":698,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["requestbody",{"_index":710,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["requested",{"_index":1057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestjson",{"_index":709,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["requests",{"_index":662,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["required",{"_index":63,"title":{},"body":{"classes/Account.html":{}}}],["res",{"_index":1160,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res.json",{"_index":724,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["resave",{"_index":1072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset",{"_index":296,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConfigurationModule.html":{},"modules/LoggerModule.html":{},"modules/RedisModule.html":{},"modules/SessionModule.html":{},"index.html":{}}}],["resetmaxage",{"_index":1117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response",{"_index":436,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{}}}],["response.getheaders",{"_index":719,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["response.status(httpstatus.internal_server_error).json(errorresponse",{"_index":746,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["response.status(statuscode).json(errorresponse",{"_index":474,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["response.ts",{"_index":944,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["responsedata",{"_index":721,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["responsejson",{"_index":720,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["responses",{"_index":663,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["result",{"_index":70,"title":{},"body":{"classes/Account.html":{},"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"interfaces/AccountProfile.html":{},"injectables/AccountService.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"interfaces/ExpressSessionUser.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Login.html":{},"classes/LoginDTO.html":{},"classes/MongoExceptionFilter.html":{},"injectables/RedisConnectService.html":{},"modules/RedisModule.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"guards/RoleGuard.html":{},"modules/SessionModule.html":{},"classes/UpdateAccountDTO.html":{},"interfaces/UserRedisSession.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":72,"title":{},"body":{"classes/Account.html":{},"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"interfaces/AccountProfile.html":{},"injectables/AccountService.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"interfaces/ExpressSessionUser.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Login.html":{},"classes/LoginDTO.html":{},"classes/MongoExceptionFilter.html":{},"injectables/RedisConnectService.html":{},"modules/RedisModule.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"guards/RoleGuard.html":{},"modules/SessionModule.html":{},"classes/UpdateAccountDTO.html":{},"interfaces/UserRedisSession.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":153,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"guards/AuthGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/RedisConnectService.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscriberService.html":{},"guards/RoleGuard.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":97,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"classes/CustomLogger.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"injectables/RedisConnectService.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"guards/RoleGuard.html":{},"injectables/ValidationPipe.html":{}}}],["rimraf",{"_index":1009,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":20,"title":{},"body":{"classes/Account.html":{},"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"interfaces/AccountProfile.html":{},"injectables/AccountService.html":{},"injectables/AuthenticationService.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"guards/RoleGuard.html":{},"interfaces/UserRedisSession.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.admin",{"_index":227,"title":{},"body":{"controllers/AccountController.html":{}}}],["role.admin)@useguards(authguard",{"_index":210,"title":{},"body":{"controllers/AccountController.html":{}}}],["role.decorator",{"_index":857,"title":{},"body":{"guards/RoleGuard.html":{}}}],["role.enum",{"_index":858,"title":{},"body":{"guards/RoleGuard.html":{}}}],["roleguard",{"_index":92,"title":{"guards/RoleGuard.html":{}},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"guards/RoleGuard.html":{},"coverage.html":{}}}],["roles",{"_index":126,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":151,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["roles(role.user",{"_index":224,"title":{},"body":{"controllers/AccountController.html":{}}}],["roles_key",{"_index":856,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rxjs",{"_index":652,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":654,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["saltrounds",{"_index":1101,"title":{},"body":{"miscellaneous/variables.html":{}}}],["same",{"_index":678,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["save",{"_index":312,"title":{},"body":{"modules/AccountModule.html":{},"miscellaneous/variables.html":{}}}],["saved",{"_index":246,"title":{},"body":{"controllers/AccountController.html":{}}}],["savesessiontomongo",{"_index":330,"title":{},"body":{"injectables/AccountService.html":{}}}],["savesessiontomongo(accountid",{"_index":349,"title":{},"body":{"injectables/AccountService.html":{}}}],["saveuninitialized",{"_index":1073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["schema",{"_index":52,"title":{},"body":{"classes/Account.html":{},"modules/AccountModule.html":{},"modules/AuthenticationModule.html":{}}}],["schema/account.schema",{"_index":303,"title":{},"body":{"modules/AccountModule.html":{},"injectables/AccountService.html":{}}}],["schemafactory",{"_index":53,"title":{},"body":{"classes/Account.html":{}}}],["schemafactory.createforclass(account",{"_index":69,"title":{},"body":{"classes/Account.html":{},"miscellaneous/variables.html":{}}}],["second",{"_index":1087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secret",{"_index":1070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secure",{"_index":1079,"title":{},"body":{"miscellaneous/variables.html":{}}}],["select",{"_index":42,"title":{},"body":{"classes/Account.html":{}}}],["select('+password",{"_index":547,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["select('+redissessionid",{"_index":369,"title":{},"body":{"injectables/AccountService.html":{}}}],["server",{"_index":461,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["service",{"_index":816,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{}}}],["service/redis",{"_index":775,"title":{},"body":{"modules/RedisModule.html":{}}}],["sess",{"_index":834,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{}}}],["sess:${sessionid",{"_index":407,"title":{},"body":{"injectables/AccountService.html":{}}}],["sess:wqdbfsxsmjglozkgx8",{"_index":827,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{}}}],["session",{"_index":89,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"injectables/AuthenticationService.html":{},"interfaces/ExpressSessionUser.html":{},"injectables/RedisConnectService.html":{},"guards/RoleGuard.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["session(sessionoptions",{"_index":769,"title":{},"body":{"injectables/RedisConnectService.html":{}}}],["session.destroy",{"_index":553,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["session.interface",{"_index":144,"title":{},"body":{"controllers/AccountAdminController.html":{},"injectables/AccountService.html":{}}}],["session.interface.ts",{"_index":897,"title":{},"body":{"interfaces/UserRedisSession.html":{},"coverage.html":{}}}],["session.user",{"_index":165,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["session.user?.role?.includes(role",{"_index":868,"title":{},"body":{"guards/RoleGuard.html":{}}}],["session.userid",{"_index":167,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{}}}],["session?.user",{"_index":864,"title":{},"body":{"guards/RoleGuard.html":{}}}],["sessionid",{"_index":102,"title":{},"body":{"controllers/AccountAdminController.html":{},"injectables/AccountService.html":{},"injectables/RedisSubscribeExpiredService.html":{}}}],["sessionmodule",{"_index":479,"title":{"modules/SessionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SessionModule.html":{},"index.html":{},"modules.html":{}}}],["sessionoptions",{"_index":765,"title":{},"body":{"injectables/RedisConnectService.html":{}}}],["sessions",{"_index":254,"title":{},"body":{"controllers/AccountController.html":{}}}],["sessionstring",{"_index":408,"title":{},"body":{"injectables/AccountService.html":{}}}],["set",{"_index":783,"title":{},"body":{"injectables/RedisPromiseService.html":{},"miscellaneous/variables.html":{}}}],["set(key",{"_index":789,"title":{},"body":{"injectables/RedisPromiseService.html":{}}}],["setcorrelationid",{"_index":930,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["setmetadata(roles_key",{"_index":1159,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":795,"title":{},"body":{"injectables/RedisPromiseService.html":{}}}],["shared/.../utils.ts",{"_index":1042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shared/utils",{"_index":519,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RoleGuard.html":{}}}],["shared/utils.ts",{"_index":929,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["show",{"_index":364,"title":{},"body":{"injectables/AccountService.html":{}}}],["socket",{"_index":683,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["solution",{"_index":674,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Account.html":{},"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"interfaces/AccountProfile.html":{},"injectables/AccountService.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/CustomLogger.html":{},"classes/ErrorException.html":{},"interfaces/ExpressSessionUser.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Login.html":{},"classes/LoginDTO.html":{},"classes/MongoExceptionFilter.html":{},"injectables/RedisConnectService.html":{},"modules/RedisModule.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"guards/RoleGuard.html":{},"modules/SessionModule.html":{},"classes/UpdateAccountDTO.html":{},"interfaces/UserRedisSession.html":{},"injectables/ValidationPipe.html":{}}}],["src/.../account",{"_index":1034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../account.constant.ts",{"_index":1035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../account.helper.ts",{"_index":1033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../account.schema.ts",{"_index":1029,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../app.config.ts",{"_index":1031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.configuration.ts",{"_index":1032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1019,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../mongoose.configuration.ts",{"_index":1037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../mongoose.provider.ts",{"_index":1036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../redis",{"_index":1039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../redis.configuration.ts",{"_index":1040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../redis.provider.ts",{"_index":1038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.decorator.ts",{"_index":1041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.enum.ts",{"_index":1016,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.configuration.ts",{"_index":932,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":480,"title":{},"body":{"modules/AppModule.html":{}}}],["src/config/app.config.ts",{"_index":933,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/config.module.ts",{"_index":558,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["src/config/configuration.service",{"_index":761,"title":{},"body":{"injectables/RedisConnectService.html":{}}}],["src/config/configuration.service.ts",{"_index":560,"title":{},"body":{"injectables/ConfigurationService.html":{},"coverage.html":{}}}],["src/config/configuration.service.ts:11",{"_index":564,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["src/config/configuration.service.ts:6",{"_index":562,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["src/config/configuration.service.ts:9",{"_index":569,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["src/exception/error.exception.ts",{"_index":630,"title":{},"body":{"classes/ErrorException.html":{},"coverage.html":{}}}],["src/exception/error.exception.ts:3",{"_index":632,"title":{},"body":{"classes/ErrorException.html":{}}}],["src/filter/http",{"_index":419,"title":{},"body":{"classes/AllExceptionFilter.html":{},"coverage.html":{}}}],["src/filter/mongodb",{"_index":731,"title":{},"body":{"classes/MongoExceptionFilter.html":{},"coverage.html":{}}}],["src/guard/auth.guard.ts",{"_index":506,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/guard/auth.guard.ts:10",{"_index":514,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/guard/auth.guard.ts:15",{"_index":516,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/guard/auth.guard.ts:7",{"_index":511,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/guard/role/role.decorator.ts",{"_index":937,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/guard/role/role.enum.ts",{"_index":1017,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/guard/role/role.guard.ts",{"_index":850,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["src/guard/role/role.guard.ts:11",{"_index":853,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/guard/role/role.guard.ts:17",{"_index":854,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/interceptor/logging.interceptor.ts",{"_index":642,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/interceptor/logging.interceptor.ts:16",{"_index":649,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/interceptor/logging.interceptor.ts:18",{"_index":647,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/logger/custom",{"_index":624,"title":{},"body":{"classes/CustomLogger.html":{},"coverage.html":{}}}],["src/logger/logger.module.ts",{"_index":639,"title":{},"body":{"modules/LoggerModule.html":{}}}],["src/main.ts",{"_index":938,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/module/account/account.constant.ts",{"_index":939,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/module/account/account.helper.ts",{"_index":940,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/module/account/account.module.ts",{"_index":298,"title":{},"body":{"modules/AccountModule.html":{}}}],["src/module/account/account.service.ts",{"_index":327,"title":{},"body":{"injectables/AccountService.html":{},"coverage.html":{}}}],["src/module/account/account.service.ts:113",{"_index":351,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/module/account/account.service.ts:138",{"_index":338,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/module/account/account.service.ts:142",{"_index":350,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/module/account/account.service.ts:151",{"_index":344,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/module/account/account.service.ts:157",{"_index":342,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/module/account/account.service.ts:164",{"_index":340,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/module/account/account.service.ts:19",{"_index":334,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/module/account/account.service.ts:27",{"_index":348,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/module/account/account.service.ts:34",{"_index":347,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/module/account/account.service.ts:58",{"_index":346,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/module/account/account.service.ts:65",{"_index":336,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/module/account/controller/account",{"_index":76,"title":{},"body":{"controllers/AccountAdminController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/module/account/controller/account.controller.ts",{"_index":189,"title":{},"body":{"controllers/AccountController.html":{},"coverage.html":{}}}],["src/module/account/controller/account.controller.ts:103",{"_index":213,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/module/account/controller/account.controller.ts:117",{"_index":199,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/module/account/controller/account.controller.ts:41",{"_index":202,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/module/account/controller/account.controller.ts:51",{"_index":211,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/module/account/controller/account.controller.ts:58",{"_index":196,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/module/account/controller/account.controller.ts:66",{"_index":207,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/module/account/dto/create",{"_index":572,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"coverage.html":{}}}],["src/module/account/dto/login.dto.ts",{"_index":727,"title":{},"body":{"classes/LoginDTO.html":{},"coverage.html":{}}}],["src/module/account/dto/login.dto.ts:10",{"_index":729,"title":{},"body":{"classes/LoginDTO.html":{}}}],["src/module/account/dto/login.dto.ts:6",{"_index":728,"title":{},"body":{"classes/LoginDTO.html":{}}}],["src/module/account/dto/update",{"_index":875,"title":{},"body":{"classes/UpdateAccountDTO.html":{},"coverage.html":{}}}],["src/module/account/interface/account",{"_index":322,"title":{},"body":{"interfaces/AccountProfile.html":{},"coverage.html":{}}}],["src/module/account/interface/express",{"_index":635,"title":{},"body":{"interfaces/ExpressSessionUser.html":{},"coverage.html":{}}}],["src/module/account/interface/user",{"_index":896,"title":{},"body":{"interfaces/UserRedisSession.html":{},"coverage.html":{}}}],["src/module/account/schema/account.schema.ts",{"_index":6,"title":{},"body":{"classes/Account.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/module/account/schema/account.schema.ts:10",{"_index":37,"title":{},"body":{"classes/Account.html":{}}}],["src/module/account/schema/account.schema.ts:13",{"_index":41,"title":{},"body":{"classes/Account.html":{}}}],["src/module/account/schema/account.schema.ts:16",{"_index":44,"title":{},"body":{"classes/Account.html":{}}}],["src/module/account/schema/account.schema.ts:19",{"_index":36,"title":{},"body":{"classes/Account.html":{}}}],["src/module/account/schema/account.schema.ts:22",{"_index":45,"title":{},"body":{"classes/Account.html":{}}}],["src/module/account/schema/account.schema.ts:25",{"_index":38,"title":{},"body":{"classes/Account.html":{}}}],["src/module/account/schema/account.schema.ts:28",{"_index":40,"title":{},"body":{"classes/Account.html":{}}}],["src/module/account/schema/account.schema.ts:31",{"_index":32,"title":{},"body":{"classes/Account.html":{}}}],["src/module/account/schema/account.schema.ts:34",{"_index":50,"title":{},"body":{"classes/Account.html":{}}}],["src/module/account/schema/account.schema.ts:39",{"_index":29,"title":{},"body":{"classes/Account.html":{}}}],["src/module/account/schema/account.schema.ts:42",{"_index":47,"title":{},"body":{"classes/Account.html":{}}}],["src/module/account/schema/account.schema.ts:45",{"_index":48,"title":{},"body":{"classes/Account.html":{}}}],["src/module/authentication/authentication.module.ts",{"_index":530,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/module/authentication/authentication.service.ts",{"_index":534,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/module/authentication/authentication.service.ts:12",{"_index":535,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/module/authentication/authentication.service.ts:18",{"_index":537,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/module/authentication/authentication.service.ts:42",{"_index":539,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/module/authentication/interface/login.interface.ts",{"_index":726,"title":{},"body":{"interfaces/Login.html":{},"coverage.html":{}}}],["src/module/mongoose/mongoose.configuration.ts",{"_index":963,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/module/mongoose/mongoose.provider.ts",{"_index":964,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/module/redis/provider/redis",{"_index":965,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/module/redis/provider/redis.provider.ts",{"_index":967,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/module/redis/redis.configuration.ts",{"_index":968,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/module/redis/redis.module.ts",{"_index":774,"title":{},"body":{"modules/RedisModule.html":{}}}],["src/module/redis/service/redis",{"_index":748,"title":{},"body":{"injectables/RedisConnectService.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscriberService.html":{},"coverage.html":{}}}],["src/module/session/redis",{"_index":803,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{},"coverage.html":{}}}],["src/module/session/session.module.ts",{"_index":872,"title":{},"body":{"modules/SessionModule.html":{}}}],["src/pipe/validation.pipe.ts",{"_index":898,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/pipe/validation.pipe.ts:27",{"_index":903,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/pipe/validation.pipe.ts:8",{"_index":907,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["starttimestamp",{"_index":693,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["statements",{"_index":928,"title":{},"body":{"coverage.html":{}}}],["statuscode",{"_index":452,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{}}}],["statusmessage",{"_index":713,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["step",{"_index":263,"title":{},"body":{"controllers/AccountController.html":{}}}],["store",{"_index":767,"title":{},"body":{"injectables/RedisConnectService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"miscellaneous/variables.html":{}}}],["string",{"_index":24,"title":{},"body":{"classes/Account.html":{},"controllers/AccountAdminController.html":{},"interfaces/AccountProfile.html":{},"injectables/AccountService.html":{},"classes/AllExceptionFilter.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/CustomLogger.html":{},"interfaces/ExpressSessionUser.html":{},"interfaces/Login.html":{},"classes/LoginDTO.html":{},"classes/MongoExceptionFilter.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"classes/UpdateAccountDTO.html":{},"interfaces/UserRedisSession.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["subscribe",{"_index":804,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"modules/SessionModule.html":{},"coverage.html":{}}}],["subscribe(channel",{"_index":843,"title":{},"body":{"injectables/RedisSubscriberService.html":{}}}],["subscriber",{"_index":822,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{}}}],["subscriber.provider",{"_index":779,"title":{},"body":{"modules/RedisModule.html":{},"injectables/RedisSubscriberService.html":{}}}],["subscriber.provider.ts",{"_index":966,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["subscriber.service",{"_index":780,"title":{},"body":{"modules/RedisModule.html":{},"injectables/RedisSubscribeExpiredService.html":{}}}],["subscriber.service.ts",{"_index":837,"title":{},"body":{"injectables/RedisSubscriberService.html":{},"coverage.html":{}}}],["subscriber.service.ts:12",{"_index":844,"title":{},"body":{"injectables/RedisSubscriberService.html":{}}}],["subscriber.service.ts:17",{"_index":841,"title":{},"body":{"injectables/RedisSubscriberService.html":{}}}],["subscriber.service.ts:7",{"_index":838,"title":{},"body":{"injectables/RedisSubscriberService.html":{}}}],["subscriberedisexpired",{"_index":806,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{}}}],["successfully",{"_index":244,"title":{},"body":{"controllers/AccountController.html":{}}}],["super(error",{"_index":633,"title":{},"body":{"classes/ErrorException.html":{}}}],["super.error(message",{"_index":629,"title":{},"body":{"classes/CustomLogger.html":{}}}],["support",{"_index":1024,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1025,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":739,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["systemerrormessage",{"_index":463,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["table",{"_index":971,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":970,"title":{},"body":{"coverage.html":{}}}],["taken",{"_index":385,"title":{},"body":{"injectables/AccountService.html":{}}}],["tap",{"_index":653,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["theid",{"_index":339,"title":{},"body":{"injectables/AccountService.html":{}}}],["thesession",{"_index":205,"title":{},"body":{"controllers/AccountController.html":{}}}],["thesession.id",{"_index":274,"title":{},"body":{"controllers/AccountController.html":{}}}],["thesession.user",{"_index":272,"title":{},"body":{"controllers/AccountController.html":{}}}],["thesession.userid",{"_index":270,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountmodel",{"_index":367,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthenticationService.html":{}}}],["this.accountmodel.create(newaccount",{"_index":390,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountmodel.findbyidanddelete(theid",{"_index":403,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountmodel.findbyidandupdate",{"_index":402,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountmodel.findbyidandupdate(accountid",{"_index":404,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountmodel.findbyidandupdate(key.userid",{"_index":377,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountmodel.findone",{"_index":376,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountmodel.findoneandupdate",{"_index":406,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountservice.createaccount(createaccountdto",{"_index":232,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.deleteaccount(accountid",{"_index":187,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["this.accountservice.deleteaccount(session.userid",{"_index":278,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.destroysession(sessionid",{"_index":163,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["this.accountservice.destroysessionfrommongobysessionid",{"_index":835,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{}}}],["this.accountservice.detroysessionfrommongo(thesession.userid",{"_index":229,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.getaccountbyid(accountid",{"_index":158,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["this.accountservice.getaccountbyid(session.userid",{"_index":225,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.getaccountbyredissessionid(sessionid",{"_index":161,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["this.accountservice.getallaccounts",{"_index":155,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["this.accountservice.savesessiontomongo",{"_index":273,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.updateaccount",{"_index":276,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.updateaccount(updateaccountdto",{"_index":183,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["this.authenticationservice.login",{"_index":239,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.authenticationservice.logout(thesession",{"_index":230,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.availableconfigs[configname",{"_index":571,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["this.client",{"_index":768,"title":{},"body":{"injectables/RedisConnectService.html":{}}}],["this.client.on(event",{"_index":848,"title":{},"body":{"injectables/RedisSubscriberService.html":{}}}],["this.configservice",{"_index":524,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RoleGuard.html":{}}}],["this.configurationservice.get('appconfig').session",{"_index":766,"title":{},"body":{"injectables/RedisConnectService.html":{}}}],["this.detroysessionfrommongo(userid",{"_index":416,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.getaccountbyid(accountid",{"_index":398,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.logger.error(json.stringify(loggererrorresponse",{"_index":473,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["this.logger.log",{"_index":166,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["this.logger.log(json.stringify(requestjson",{"_index":711,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["this.logger.log(json.stringify(responsejson",{"_index":725,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["this.redispromiseservice.del(id",{"_index":417,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.redispromiseservice.get(`sess:${sessionid",{"_index":373,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.redispromiseservice.get(id",{"_index":409,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.redissubscriberservice.on",{"_index":825,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{}}}],["this.redissubscriberservice.subscribe('__keyevent@0__:expired",{"_index":824,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":860,"title":{},"body":{"guards/RoleGuard.html":{}}}],["this.tovalidate(metatype",{"_index":912,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["this.validatesession(request",{"_index":522,"title":{},"body":{"guards/AuthGuard.html":{}}}],["throw",{"_index":374,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthenticationService.html":{},"guards/RoleGuard.html":{},"injectables/ValidationPipe.html":{}}}],["throwing",{"_index":411,"title":{},"body":{"injectables/AccountService.html":{}}}],["thrown",{"_index":669,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["throws",{"_index":238,"title":{},"body":{"controllers/AccountController.html":{}}}],["time",{"_index":448,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{}}}],["timestamp",{"_index":447,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{}}}],["todo",{"_index":1089,"title":{},"body":{"miscellaneous/variables.html":{}}}],["token",{"_index":690,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["toobject",{"_index":60,"title":{},"body":{"classes/Account.html":{}}}],["touch",{"_index":1118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tovalidate",{"_index":899,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":901,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["trace",{"_index":627,"title":{},"body":{"classes/CustomLogger.html":{}}}],["tracing",{"_index":668,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["transform",{"_index":900,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transform(value",{"_index":905,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":910,"title":{},"body":{"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["triggered",{"_index":317,"title":{},"body":{"modules/AccountModule.html":{}}}],["true",{"_index":34,"title":{},"body":{"classes/Account.html":{},"injectables/AccountService.html":{},"modules/AppModule.html":{},"guards/RoleGuard.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":744,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["ttl",{"_index":247,"title":{},"body":{"controllers/AccountController.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":22,"title":{},"body":{"classes/Account.html":{},"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"interfaces/AccountProfile.html":{},"injectables/AccountService.html":{},"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/ConfigurationService.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/CustomLogger.html":{},"interfaces/ExpressSessionUser.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Login.html":{},"classes/LoginDTO.html":{},"classes/MongoExceptionFilter.html":{},"injectables/RedisConnectService.html":{},"injectables/RedisPromiseService.html":{},"injectables/RedisSubscribeExpiredService.html":{},"injectables/RedisSubscriberService.html":{},"guards/RoleGuard.html":{},"classes/UpdateAccountDTO.html":{},"interfaces/UserRedisSession.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1027,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":921,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["types.includes(metatype",{"_index":924,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["types/connect",{"_index":977,"title":{},"body":{"dependencies.html":{}}}],["types/ioredis",{"_index":979,"title":{},"body":{"dependencies.html":{}}}],["types/lodash",{"_index":981,"title":{},"body":{"dependencies.html":{}}}],["types/mongodb",{"_index":983,"title":{},"body":{"dependencies.html":{}}}],["types/redis",{"_index":985,"title":{},"body":{"dependencies.html":{}}}],["types/rx",{"_index":987,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":540,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["unauthorizedexception('invalid",{"_index":550,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["undefined",{"_index":31,"title":{},"body":{"classes/Account.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["unique",{"_index":35,"title":{},"body":{"classes/Account.html":{}}}],["unix(timestamp",{"_index":715,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["unused",{"_index":257,"title":{},"body":{"controllers/AccountController.html":{}}}],["up",{"_index":796,"title":{},"body":{"injectables/RedisPromiseService.html":{}}}],["update",{"_index":184,"title":{},"body":{"controllers/AccountAdminController.html":{},"classes/UpdateAccountDTO.html":{}}}],["updateaccount",{"_index":87,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"miscellaneous/variables.html":{}}}],["updateaccount(updateaccountdto",{"_index":111,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["updateaccountdto",{"_index":112,"title":{"classes/UpdateAccountDTO.html":{}},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"classes/UpdateAccountDTO.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updateaccountreponse",{"_index":951,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["updatedaccount",{"_index":401,"title":{},"body":{"injectables/AccountService.html":{}}}],["updatedaccountdetails",{"_index":182,"title":{},"body":{"controllers/AccountAdminController.html":{}}}],["updatedaccountobject",{"_index":400,"title":{},"body":{"injectables/AccountService.html":{}}}],["updatedat",{"_index":21,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountProfile.html":{},"injectables/AccountService.html":{},"classes/UpdateAccountDTO.html":{},"miscellaneous/variables.html":{}}}],["uri",{"_index":1129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["url",{"_index":684,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["use",{"_index":1069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["used",{"_index":259,"title":{},"body":{"controllers/AccountController.html":{},"injectables/LoggingInterceptor.html":{}}}],["usefactory",{"_index":1128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usefindandmodify",{"_index":1132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":122,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{}}}],["useguards(authguard",{"_index":152,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{}}}],["usenewurlparser",{"_index":1133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user",{"_index":178,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"interfaces/ExpressSessionUser.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["useragent",{"_index":705,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["usererrormessage",{"_index":458,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/MongoExceptionFilter.html":{}}}],["userid",{"_index":414,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/ExpressSessionUser.html":{}}}],["userid.interface",{"_index":138,"title":{},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"injectables/AuthenticationService.html":{},"guards/RoleGuard.html":{}}}],["userid.interface.ts",{"_index":636,"title":{},"body":{"interfaces/ExpressSessionUser.html":{},"coverage.html":{}}}],["userredissession",{"_index":141,"title":{"interfaces/UserRedisSession.html":{}},"body":{"controllers/AccountAdminController.html":{},"injectables/AccountService.html":{},"interfaces/UserRedisSession.html":{},"coverage.html":{}}}],["useunifiedtopology",{"_index":1131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["using",{"_index":1063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["util",{"_index":792,"title":{},"body":{"injectables/RedisPromiseService.html":{},"injectables/RedisSubscriberService.html":{}}}],["uuid",{"_index":1012,"title":{},"body":{"dependencies.html":{}}}],["uuidv4",{"_index":1161,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":911,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(object",{"_index":915,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validatesession",{"_index":508,"title":{},"body":{"guards/AuthGuard.html":{}}}],["validatesession(request",{"_index":515,"title":{},"body":{"guards/AuthGuard.html":{}}}],["validation",{"_index":598,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{}}}],["validationerror",{"_index":456,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/ValidationPipe.html":{}}}],["validationpipe",{"_index":139,"title":{"injectables/ValidationPipe.html":{}},"body":{"controllers/AccountAdminController.html":{},"controllers/AccountController.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["validator",{"_index":597,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateAccountRoleDTO.html":{},"classes/LoginDTO.html":{},"classes/UpdateAccountDTO.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["value",{"_index":424,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/ConfigurationService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MongoExceptionFilter.html":{},"injectables/RedisPromiseService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":830,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{},"coverage.html":{}}}],["variables",{"_index":1030,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifiedarequiredroles",{"_index":866,"title":{},"body":{"guards/RoleGuard.html":{}}}],["verifiedbackendtoken",{"_index":523,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RoleGuard.html":{}}}],["verifybackendtoken",{"_index":518,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RoleGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["versionkey",{"_index":62,"title":{},"body":{"classes/Account.html":{}}}],["void",{"_index":433,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CustomLogger.html":{},"classes/MongoExceptionFilter.html":{}}}],["won't",{"_index":258,"title":{},"body":{"controllers/AccountController.html":{}}}],["wqdbfsxsmjglozkgx8",{"_index":832,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{}}}],["x",{"_index":1053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["xm97imod7ddvr",{"_index":828,"title":{},"body":{"injectables/RedisSubscribeExpiredService.html":{}}}],["zoom",{"_index":295,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConfigurationModule.html":{},"modules/LoggerModule.html":{},"modules/RedisModule.html":{},"modules/SessionModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Account.html":{"url":"classes/Account.html","title":"class - Account","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Account\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/account/schema/account.schema.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                avatar\n                            \n                            \n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                gender\n                            \n                            \n                                    Optional\n                                language\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                            \n                                    Optional\n                                redisSessionId\n                            \n                            \n                                role\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            avatar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop({default: 'https://image.flaticon.com/icons/png/512/2922/2922688.png'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/schema/account.schema.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop({default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/schema/account.schema.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop({required: true, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/schema/account.schema.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/schema/account.schema.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gender\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/schema/account.schema.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            language\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop({default: 'en'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/schema/account.schema.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/schema/account.schema.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop({required: true, select: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/schema/account.schema.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop({required: true, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/schema/account.schema.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            redisSessionId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop({select: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/schema/account.schema.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     [string]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop({select: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/schema/account.schema.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/schema/account.schema.ts:34\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport * as moment from 'moment';\n\nexport type AccountDocument = Account & Document;\n\n@Schema({ toObject: { getters: true }, versionKey: false })\nexport class Account {\n  @Prop({ required: true })\n  firstName: string;\n\n  @Prop({ required: true })\n  lastName: string;\n\n  @Prop({ required: true, select: false })\n  password: string;\n\n  @Prop({ required: true, unique: true })\n  email: string;\n\n  @Prop({ required: true, unique: true })\n  phone: string;\n\n  @Prop({ required: true })\n  gender: string;\n\n  @Prop({ default: 'en' })\n  language?: string;\n\n  @Prop({ default: new Date().toISOString() })\n  createdAt: Date;\n\n  @Prop()\n  updatedAt: Date;\n\n  @Prop({\n    default: 'https://image.flaticon.com/icons/png/512/2922/2922688.png',\n  })\n  avatar: string;\n\n  @Prop({ select: false })\n  redisSessionId?: string;\n\n  @Prop({ select: false })\n  role: [string];\n}\n\nexport const AccountSchema = SchemaFactory.createForClass(Account);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AccountAdminController.html":{"url":"controllers/AccountAdminController.html","title":"controller - AccountAdminController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AccountAdminController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/account/controller/account-admin.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /account/admin\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteAccount\n                            \n                            \n                                    Async\n                                destroySession\n                            \n                            \n                                    Async\n                                getAccountById\n                            \n                            \n                                    Async\n                                getAccountByRedisSessionId\n                            \n                            \n                                    Async\n                                getAllAccounts\n                            \n                            \n                                    Async\n                                updateAccount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteAccount\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAccount(accountId: string, session: ExpressSessionUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)@Roles(Role.Admin)@UseGuards(AuthGuard, RoleGuard)\n                \n            \n\n            \n                \n                    Defined in src/module/account/controller/account-admin.controller.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    session\n                                    \n                                                ExpressSessionUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            destroySession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroySession(sessionId: string, session: ExpressSessionUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('destroySession/:id')@HttpCode(HttpStatus.OK)@Roles(Role.Admin)@UseGuards(AuthGuard, RoleGuard)\n                \n            \n\n            \n                \n                    Defined in src/module/account/controller/account-admin.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sessionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    session\n                                    \n                                                ExpressSessionUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAccountById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAccountById(accountId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@Roles(Role.Admin)@UseGuards(AuthGuard, RoleGuard)\n                \n            \n\n            \n                \n                    Defined in src/module/account/controller/account-admin.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAccountByRedisSessionId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAccountByRedisSessionId(sessionId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('getAccountByRedisSessionId/:redisSessionId')@HttpCode(HttpStatus.OK)@Roles(Role.Admin)@UseGuards(AuthGuard, RoleGuard)\n                \n            \n\n            \n                \n                    Defined in src/module/account/controller/account-admin.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sessionId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAllAccounts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllAccounts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('')@HttpCode(HttpStatus.OK)@Roles(Role.Admin)@UseGuards(AuthGuard, RoleGuard)\n                \n            \n\n            \n                \n                    Defined in src/module/account/controller/account-admin.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateAccount\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAccount(updateAccountDto: UpdateAccountDTO, accountId: string, session: ExpressSessionUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@HttpCode(HttpStatus.OK)@Roles(Role.Admin)@UseGuards(AuthGuard, RoleGuard)\n                \n            \n\n            \n                \n                    Defined in src/module/account/controller/account-admin.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateAccountDto\n                                    \n                                                UpdateAccountDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    session\n                                    \n                                                ExpressSessionUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Logger,\n  Param,\n  Put,\n  Session,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '../../../guard/auth.guard';\nimport { Roles } from '../../../guard/role/role.decorator';\nimport { Role } from '../../../guard/role/role.enum';\nimport { RoleGuard } from '../../../guard/role/role.guard';\nimport { UpdateAccountDTO } from '../dto/update-account-profile.dto';\nimport { AccountProfile } from '../interface/account-profile.interface';\nimport { AccountService } from '../account.service';\nimport { ExpressSessionUser } from '../interface/express-session-userId.interface';\nimport { ValidationPipe } from '../../../pipe/validation.pipe';\nimport { UserRedisSession } from '../interface/user-redis-session.interface';\n\n@Controller('/account/admin')\nexport class AccountAdminController {\n  private readonly logger = new Logger(AccountAdminController.name);\n\n  constructor(private readonly accountService: AccountService) {}\n\n  @Get('')\n  @HttpCode(HttpStatus.OK)\n  @Roles(Role.Admin)\n  @UseGuards(AuthGuard, RoleGuard)\n  async getAllAccounts(): Promise {\n    return await this.accountService.getAllAccounts();\n  }\n\n  @Get(':id')\n  @HttpCode(HttpStatus.OK)\n  @Roles(Role.Admin)\n  @UseGuards(AuthGuard, RoleGuard)\n  async getAccountById(\n    @Param('id') accountId: string,\n  ): Promise {\n    return await this.accountService.getAccountById(accountId);\n  }\n\n  @Get('getAccountByRedisSessionId/:redisSessionId')\n  @HttpCode(HttpStatus.OK)\n  @Roles(Role.Admin)\n  @UseGuards(AuthGuard, RoleGuard)\n  async getAccountByRedisSessionId(\n    @Param('redisSessionId') sessionId,\n  ): Promise {\n    return await this.accountService.getAccountByRedisSessionId(sessionId);\n  }\n\n  @Get('destroySession/:id')\n  @HttpCode(HttpStatus.OK)\n  @Roles(Role.Admin)\n  @UseGuards(AuthGuard, RoleGuard)\n  async destroySession(\n    @Param('id') sessionId: string,\n    @Session() session: ExpressSessionUser,\n  ): Promise {\n    await this.accountService.destroySession(sessionId);\n    const admin = session.user;\n\n    this.logger.log(\n      `[ADMIN - ${session.userId} ${admin.firstName} ${admin.lastName}] : Performing destroy session operation on session id - ${sessionId}`,\n    );\n  }\n\n  // should delete this feature or place limitations as admin should not be able to edit user information\n  @Put(':id')\n  @HttpCode(HttpStatus.OK)\n  @Roles(Role.Admin)\n  @UseGuards(AuthGuard, RoleGuard)\n  async updateAccount(\n    @Body(new ValidationPipe()) updateAccountDto: UpdateAccountDTO,\n    @Param('id') accountId: string,\n    @Session() session: ExpressSessionUser,\n  ): Promise {\n    const updatedAccountDetails: AccountProfile =\n      await this.accountService.updateAccount(updateAccountDto, accountId);\n    const admin = session.user;\n\n    this.logger.log(\n      `[ADMIN - ${session.userId} ${admin.firstName} ${admin.lastName}] : Performing update account operation on account id - ${accountId}`,\n    );\n\n    return updatedAccountDetails;\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @Roles(Role.Admin)\n  @UseGuards(AuthGuard, RoleGuard)\n  async deleteAccount(\n    @Param('id') accountId: string,\n    @Session() session: ExpressSessionUser,\n  ): Promise {\n    const admin = session.user;\n    await this.accountService.deleteAccount(accountId);\n\n    this.logger.log(\n      `[ADMIN - ${session.userId} ${admin.firstName} ${admin.lastName}] : Performing delete account operation on account id - ${accountId}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AccountController.html":{"url":"controllers/AccountController.html","title":"controller - AccountController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AccountController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/account/controller/account.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /account\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAccount\n                            \n                            \n                                    Async\n                                deleteAccount\n                            \n                            \n                                    Async\n                                getAccountById\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                updateAccount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createAccount\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAccount(createAccountDto: CreateAccountDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)\n                \n            \n\n            \n                \n                    Defined in src/module/account/controller/account.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAccountDto\n                                    \n                                                CreateAccountDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteAccount\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAccount(session: ExpressSessionUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('')@HttpCode(HttpStatus.NO_CONTENT)@Roles(Role.User)@UseGuards(AuthGuard, RoleGuard)\n                \n            \n\n            \n                \n                    Defined in src/module/account/controller/account.controller.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    session\n                                    \n                                                ExpressSessionUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAccountById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAccountById(session: ExpressSessionUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('')@HttpCode(HttpStatus.OK)@Roles(Role.User)@UseGuards(AuthGuard, RoleGuard)\n                \n            \n\n            \n                \n                    Defined in src/module/account/controller/account.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    session\n                                    \n                                                ExpressSessionUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginDto: LoginDTO, theSession: ExpressSessionUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/module/account/controller/account.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    theSession\n                                    \n                                                ExpressSessionUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            logout\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(theSession: ExpressSessionUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('logout')@HttpCode(HttpStatus.OK)@Roles(Role.User, Role.Admin)@UseGuards(AuthGuard, RoleGuard)\n                \n            \n\n            \n                \n                    Defined in src/module/account/controller/account.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    theSession\n                                    \n                                                ExpressSessionUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateAccount\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAccount(updateAccountDto: UpdateAccountDTO, session: ExpressSessionUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('')@HttpCode(HttpStatus.OK)@Roles(Role.User)@UseGuards(AuthGuard, RoleGuard)\n                \n            \n\n            \n                \n                    Defined in src/module/account/controller/account.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateAccountDto\n                                    \n                                                UpdateAccountDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    session\n                                    \n                                                ExpressSessionUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Logger,\n  Post,\n  Put,\n  Session,\n  UseGuards,\n} from '@nestjs/common';\nimport * as lodash from 'lodash';\nimport { AuthGuard } from '../../../guard/auth.guard';\nimport { Roles } from '../../../guard/role/role.decorator';\nimport { Role } from '../../../guard/role/role.enum';\nimport { RoleGuard } from '../../../guard/role/role.guard';\nimport { ValidationPipe } from '../../../pipe/validation.pipe';\nimport { AuthenticationService } from '../../authentication/authentication.service';\nimport { AccountService } from '../account.service';\nimport { CreateAccountDTO } from '../dto/create-account.dto';\nimport { LoginDTO } from '../dto/login.dto';\nimport { UpdateAccountDTO } from '../dto/update-account-profile.dto';\nimport { AccountProfile } from '../interface/account-profile.interface';\nimport { ExpressSessionUser } from '../interface/express-session-userId.interface';\n\n@Controller('/account')\nexport class AccountController {\n  private readonly logger = new Logger(AccountController.name);\n\n  constructor(\n    private readonly accountService: AccountService,\n    private readonly authenticationService: AuthenticationService,\n  ) {}\n\n  @Get('')\n  @HttpCode(HttpStatus.OK)\n  @Roles(Role.User)\n  @UseGuards(AuthGuard, RoleGuard)\n  async getAccountById(\n    @Session() session: ExpressSessionUser,\n  ): Promise {\n    return await this.accountService.getAccountById(session.userId);\n  }\n\n  @Get('logout')\n  @HttpCode(HttpStatus.OK)\n  @Roles(Role.User, Role.Admin)\n  @UseGuards(AuthGuard, RoleGuard)\n  async logout(@Session() theSession: ExpressSessionUser): Promise {\n    await this.accountService.detroySessionFromMongo(theSession.userId);\n    await this.authenticationService.logout(theSession);\n  }\n\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  async createAccount(\n    @Body(new ValidationPipe()) createAccountDto: CreateAccountDTO,\n  ): Promise {\n    return await this.accountService.createAccount(createAccountDto);\n  }\n\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  async login(\n    @Body(new ValidationPipe()) loginDto: LoginDTO,\n    @Session() theSession: ExpressSessionUser,\n  ): Promise {\n    const { email, password } = loginDto;\n\n    // create error handler for case when authenticationService throws error\n    const account: AccountProfile = await this.authenticationService.login({\n      email,\n      password,\n    });\n\n    /*\n        Found a problem:\n        1. if a legitimate user login successfully, a session associated with the user \n           would be saved to redis with a ttl.\n        2. but if the user deletes his session and login again, we would issue a new session\n           to the user as the user does not have the previously deleted sessions.\n        3. now we have 2 session associated with the user (but 1 is unused & won't be used again, the other \n           1 would be used)\n        4. if the user repeatedly performs step (2), this would cause excessive redis session to be created while\n           only one session is actually being used.\n    */\n    theSession.userId = account['_id'];\n    theSession.user = account;\n\n    await this.accountService.saveSessionToMongo(\n      theSession.userId,\n      theSession.id,\n    );\n    return lodash.omit(account, ['role']);\n  }\n\n  @Put('')\n  @HttpCode(HttpStatus.OK)\n  @Roles(Role.User)\n  @UseGuards(AuthGuard, RoleGuard)\n  async updateAccount(\n    @Body(new ValidationPipe()) updateAccountDto: UpdateAccountDTO,\n    @Session() session: ExpressSessionUser,\n  ): Promise {\n    return await this.accountService.updateAccount(\n      updateAccountDto,\n      session.userId,\n    );\n  }\n\n  @Delete('')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @Roles(Role.User)\n  @UseGuards(AuthGuard, RoleGuard)\n  async deleteAccount(@Session() session: ExpressSessionUser): Promise {\n    await this.accountService.deleteAccount(session.userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AccountModule.html":{"url":"modules/AccountModule.html","title":"module - AccountModule","body":"\n                   \n\n\n\n\n    Modules\n    AccountModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AccountModule\n\n\n\ncluster_AccountModule_exports\n\n\n\ncluster_AccountModule_imports\n\n\n\ncluster_AccountModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAccountModule\n\nAccountModule\n\nAccountModule -->\n\nAuthenticationModule->AccountModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAccountModule -->\n\nLoggerModule->AccountModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAccountModule -->\n\nRedisModule->AccountModule\n\n\n\n\n\nAccountService \n\nAccountService \n\nAccountService  -->\n\nAccountModule->AccountService \n\n\n\n\n\nAccountService\n\nAccountService\n\nAccountModule -->\n\nAccountService->AccountModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/module/account/account.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccountService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AccountController\n                        \n                        \n                            AccountAdminController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            LoggerModule\n                        \n                        \n                            RedisModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AccountService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { AuthenticationModule } from '../authentication/authentication.module';\nimport { RedisModule } from '../redis/redis.module';\nimport { AccountService } from './account.service';\nimport { Account, AccountSchema } from './schema/account.schema';\nimport { AccountAdminController } from './controller/account-admin.controller';\nimport { LoggerModule } from '../../logger/logger.module';\nimport { AccountController } from './controller/account.controller';\n\n@Module({\n  imports: [\n    // possibly moving password encryption to a pre-save hook by mongoose\n    // https://stackoverflow.com/questions/62553953/nest-js-mongoose-why-is-my-pre-save-hook-failing-to-be-triggered\n    MongooseModule.forFeature([{ name: Account.name, schema: AccountSchema }]),\n    RedisModule,\n    AuthenticationModule,\n    LoggerModule,\n  ],\n  controllers: [AccountController, AccountAdminController],\n  providers: [AccountService],\n  exports: [AccountService],\n})\nexport class AccountModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AccountProfile.html":{"url":"interfaces/AccountProfile.html","title":"interface - AccountProfile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AccountProfile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/account/interface/account-profile.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        _id\n                                \n                                \n                                            Optional\n                                        avatar\n                                \n                                \n                                            Optional\n                                        createdAt\n                                \n                                \n                                        email\n                                \n                                \n                                        firstName\n                                \n                                \n                                        gender\n                                \n                                \n                                            Optional\n                                        id\n                                \n                                \n                                            Optional\n                                        language\n                                \n                                \n                                        lastName\n                                \n                                \n                                            Optional\n                                        password\n                                \n                                \n                                        phone\n                                \n                                \n                                            Optional\n                                        role\n                                \n                                \n                                            Optional\n                                        updatedAt\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        avatar\n                                    \n                                \n                                \n                                    \n                                        avatar:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gender\n                                    \n                                \n                                \n                                    \n                                        gender:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        language\n                                    \n                                \n                                \n                                    \n                                        language:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                    \n                                \n                                \n                                    \n                                        role:     [string]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [string]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                    \n                                \n                                \n                                    \n                                        updatedAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface AccountProfile {\n  id?: string;\n  _id?: string;\n  firstName: string;\n  lastName: string;\n  password?: string;\n  email: string;\n  gender: string;\n  phone: string;\n  language?: string;\n  createdAt?: Date;\n  updatedAt?: Date;\n  avatar?: string;\n  role?: [string];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountService.html":{"url":"injectables/AccountService.html","title":"injectable - AccountService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AccountService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/account/account.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAccount\n                            \n                            \n                                    Async\n                                deleteAccount\n                            \n                            \n                                    Async\n                                destroySession\n                            \n                            \n                                    Async\n                                destroySessionFromMongoBySessionId\n                            \n                            \n                                    Async\n                                detroySessionFromMongo\n                            \n                            \n                                    Async\n                                getAccountById\n                            \n                            \n                                    Async\n                                getAccountByRedisSessionId\n                            \n                            \n                                    Async\n                                getAllAccounts\n                            \n                            \n                                    Async\n                                saveSessionToMongo\n                            \n                            \n                                    Async\n                                updateAccount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(accountModel: Model, redisPromiseService: RedisPromiseService)\n                    \n                \n                        \n                            \n                                Defined in src/module/account/account.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        accountModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisPromiseService\n                                                  \n                                                        \n                                                                        RedisPromiseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createAccount\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAccount(createAccountDto: CreateAccountDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/module/account/account.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAccountDto\n                                    \n                                                CreateAccountDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteAccount\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAccount(theId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/account/account.service.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    theId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            destroySession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroySession(sessionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/account/account.service.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sessionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            destroySessionFromMongoBySessionId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroySessionFromMongoBySessionId(sessionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/account/account.service.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sessionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            detroySessionFromMongo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    detroySessionFromMongo(accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/account/account.service.ts:151\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAccountById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAccountById(theId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/account/account.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    theId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAccountByRedisSessionId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAccountByRedisSessionId(sessionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/account/account.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sessionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAllAccounts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllAccounts()\n                \n            \n\n\n            \n                \n                    Defined in src/module/account/account.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            saveSessionToMongo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveSessionToMongo(accountId: string, sessionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/account/account.service.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sessionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateAccount\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAccount(updateAccountDto: UpdateAccountDTO, accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/account/account.service.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateAccountDto\n                                    \n                                                UpdateAccountDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport {\n  CreateAccountDTO,\n  CreateAccountRoleDTO,\n} from './dto/create-account.dto';\nimport { UpdateAccountDTO } from './dto/update-account-profile.dto';\nimport { AccountProfile } from './interface/account-profile.interface';\nimport { Account, AccountDocument } from './schema/account.schema';\nimport * as lodash from 'lodash';\nimport { hashPassword, isAccountTaken } from './account.helper';\nimport { RedisPromiseService } from '../redis/service/redis-promise.service';\nimport { DEFAULT_ACCOUNT_ROLE } from './account.constant';\nimport { UserRedisSession } from './interface/user-redis-session.interface';\nimport { ExpressSessionUser } from './interface/express-session-userId.interface';\n\n@Injectable()\nexport class AccountService {\n  constructor(\n    @InjectModel(Account.name)\n    private readonly accountModel: Model,\n    private readonly redisPromiseService: RedisPromiseService,\n  ) {}\n\n  // modify to show different account information based on role\n  async getAllAccounts(): Promise {\n    return await this.accountModel\n      .find({})\n      .select('+redisSessionId +role')\n      .lean();\n  }\n\n  async getAccountByRedisSessionId(\n    sessionId: string,\n  ): Promise {\n    const key: ExpressSessionUser = JSON.parse(\n      await this.redisPromiseService.get(`sess:${sessionId}`),\n    );\n\n    if (!key) {\n      throw new BadRequestException('Invalid session id.');\n    }\n\n    let account = await this.accountModel.findOne({\n      redisSessionId: sessionId,\n    });\n\n    if (!account) {\n      account = await this.accountModel.findByIdAndUpdate(key.userId, {\n        redisSessionId: sessionId,\n      });\n    }\n\n    return account;\n  }\n\n  async getAccountById(theId: string): Promise {\n    return await this.accountModel\n      .findById(theId)\n      .select('+redisSessionId +role')\n      .lean();\n  }\n\n  async createAccount(\n    createAccountDto: CreateAccountDTO,\n  ): Promise {\n    const filteredAccountDetails = lodash.pick(createAccountDto, [\n      'firstName',\n      'lastName',\n      'password',\n      'email',\n      'phone',\n      'gender',\n      'language',\n      'avatar',\n    ]);\n\n    const accountExist = await isAccountTaken(\n      this.accountModel,\n      filteredAccountDetails.email,\n    );\n\n    if (accountExist) {\n      throw new BadRequestException('Account is already taken.');\n    }\n\n    const hashedPassword = await hashPassword(filteredAccountDetails.password);\n    const newAccount: CreateAccountRoleDTO = {\n      ...filteredAccountDetails,\n      password: hashedPassword,\n      role: [DEFAULT_ACCOUNT_ROLE],\n    };\n\n    const createdAccount = await this.accountModel.create(newAccount);\n    // lots of repeated lodash.pick (to refactor in future)\n    const filterNewAccountDetails = lodash.pick(createdAccount, [\n      'role',\n      'firstName',\n      'lastName',\n      'email',\n      'gender',\n      'phone',\n      'language',\n      'createdAt',\n      'id',\n      'avatar',\n    ]);\n\n    return filterNewAccountDetails;\n  }\n\n  async updateAccount(\n    updateAccountDto: UpdateAccountDTO,\n    accountId: string,\n  ): Promise {\n    const account = await this.getAccountById(accountId);\n\n    if (!account) {\n      throw new BadRequestException('Invalid id given');\n    }\n\n    const updatedAccountObject = {\n      ...account,\n      ...updateAccountDto,\n      updatedAt: new Date(),\n    };\n    const updatedAccount = await this.accountModel.findByIdAndUpdate(\n      accountId,\n      updatedAccountObject,\n      {\n        new: true,\n      },\n    );\n    return await updatedAccount;\n  }\n\n  async deleteAccount(theId: string): Promise {\n    return await this.accountModel.findByIdAndDelete(theId);\n  }\n\n  async saveSessionToMongo(\n    accountId: string,\n    sessionId: string,\n  ): Promise {\n    await this.accountModel.findByIdAndUpdate(accountId, {\n      redisSessionId: sessionId,\n    });\n  }\n\n  async detroySessionFromMongo(accountId: string): Promise {\n    await this.accountModel.findByIdAndUpdate(accountId, {\n      redisSessionId: null,\n    });\n  }\n\n  async destroySessionFromMongoBySessionId(sessionId: string): Promise {\n    await this.accountModel.findOneAndUpdate(\n      { redisSessionId: sessionId },\n      { redisSessionId: null },\n    );\n  }\n\n  async destroySession(sessionId: string): Promise {\n    const id: string = `sess:${sessionId}`;\n    const sessionString: string = await this.redisPromiseService.get(id);\n\n    if (!sessionString) {\n      throw new Error(\n        'Invalid session id. Error throwing would be replaced by a custom error',\n      );\n    }\n\n    const { userId } = JSON.parse(sessionString);\n    await this.detroySessionFromMongo(userId);\n    await this.redisPromiseService.del(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllExceptionFilter.html":{"url":"classes/AllExceptionFilter.html","title":"class - AllExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filter/http-exception.filter.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseExceptionFilter\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger(AllExceptionFilter.name)\n                        \n                    \n                        \n                            \n                                    Defined in src/filter/http-exception.filter.ts:16\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: Error | HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/filter/http-exception.filter.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            Error | HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  HttpException,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport { BaseExceptionFilter } from '@nestjs/core';\nimport { Request, Response } from 'express';\nimport * as httpContext from 'express-http-context';\nimport * as moment from 'moment';\nimport { ErrorException } from '../exception/error.exception';\n\n@Catch()\nexport class AllExceptionFilter extends BaseExceptionFilter {\n  private readonly logger = new Logger(AllExceptionFilter.name);\n\n  catch(exception: Error | HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const request: Request = ctx.getRequest();\n    const response: Response = ctx.getResponse();\n\n    const timestamp = +moment();\n    const time = new Date().toUTCString();\n    const correlationId: string = httpContext.get('correlationId');\n\n    const statusCode =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const validationError =\n      exception instanceof ErrorException\n        ? exception.getResponse()['validationError']\n        : '';\n\n    const userErrorMessage =\n      statusCode === 500 ? 'Internal Server Error' : exception.message;\n\n    const systemErrorMessage = exception.message;\n\n    const method = request.method;\n    const path = request.originalUrl;\n    const exceptionStack = exception.stack;\n\n    const errorResponse = {\n      timestamp,\n      time,\n      correlationId,\n      statusCode,\n      message: userErrorMessage,\n      ...(validationError && { validationError }),\n    };\n\n    const loggerErrorResponse = {\n      timestamp,\n      time,\n      correlationId,\n      statusCode,\n      method,\n      path,\n      systemErrorMessage,\n      ...(validationError && { validationError }),\n      exceptionStack,\n    };\n\n    this.logger.error(JSON.stringify(loggerErrorResponse));\n    response.status(statusCode).json(errorResponse);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAccountModule\n\nAccountModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAccountModule->AppModule\n\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\nAppModule -->\n\nConfigurationModule->AppModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AccountModule\n                        \n                        \n                            AuthenticationModule\n                        \n                        \n                            ConfigurationModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { appConfiguration } from './app.configuration';\nimport { ConfigurationModule } from './config/config.module';\nimport { AccountModule } from './module/account/account.module';\nimport { AuthenticationModule } from './module/authentication/authentication.module';\nimport { mongooseConfiguration } from './module/mongoose/mongoose.configuration';\nimport { MongooseClient } from './module/mongoose/mongoose.provider';\nimport { redisConfiguration } from './module/redis/redis.configuration';\nimport { SessionModule } from './module/session/session.module';\n\n@Module({\n  imports: [\n    // configure .env file\n    ConfigModule.forRoot({\n      envFilePath: '.env',\n      load: [appConfiguration, redisConfiguration, mongooseConfiguration],\n      isGlobal: true,\n    }),\n    // configure mongoose (MongoDB) connection\n    MongooseModule.forRootAsync(MongooseClient),\n    AccountModule,\n    ConfigurationModule,\n    AuthenticationModule,\n    SessionModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guard/auth.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                validateSession\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/guard/auth.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guard/auth.guard.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            validateSession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateSession(request: Request)\n                \n            \n\n\n            \n                \n                    Defined in src/guard/auth.guard.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { verifyBackendToken } from '../../shared/utils';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private configService: ConfigService) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const request: Request = context.switchToHttp().getRequest();\n    return this.validateSession(request);\n  }\n\n  private validateSession(request: Request): boolean {\n    const verifiedBackendToken = verifyBackendToken(\n      request,\n      this.configService,\n    );\n\n    return !!request.session['userId'] || verifiedBackendToken;\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthenticationModule.html":{"url":"modules/AuthenticationModule.html","title":"module - AuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\ncluster_AuthenticationModule_imports\n\n\n\n\nRedisModule\n\nRedisModule\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nRedisModule->AuthenticationModule\n\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\nAuthenticationService  -->\n\nAuthenticationModule->AuthenticationService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/module/authentication/authentication.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RedisModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthenticationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Account, AccountSchema } from '../account/schema/account.schema';\nimport { RedisModule } from '../redis/redis.module';\nimport { AuthenticationService } from './authentication.service';\n\n@Global()\n@Module({\n  imports: [\n    RedisModule,\n    MongooseModule.forFeature([{ name: Account.name, schema: AccountSchema }]),\n  ],\n  providers: [AuthenticationService],\n  exports: [AuthenticationService],\n})\nexport class AuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/authentication/authentication.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(accountModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/module/authentication/authentication.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        accountModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(undefined: Login)\n                \n            \n\n\n            \n                \n                    Defined in src/module/authentication/authentication.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                Login\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            logout\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(session: ExpressSessionUser)\n                \n            \n\n\n            \n                \n                    Defined in src/module/authentication/authentication.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    session\n                                    \n                                                ExpressSessionUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { comparePassword } from '../account/account.helper';\nimport { AccountProfile } from '../account/interface/account-profile.interface';\nimport { Account, AccountDocument } from '../account/schema/account.schema';\nimport { Login } from './interface/login.interface';\nimport * as lodash from 'lodash';\nimport { ExpressSessionUser } from '../account/interface/express-session-userId.interface';\n\n@Injectable()\nexport class AuthenticationService {\n  constructor(\n    @InjectModel(Account.name)\n    private readonly accountModel: Model,\n  ) {}\n\n  async login({ email, password }: Login): Promise {\n    const account: AccountProfile = await this.accountModel\n      .findOne({ email })\n      .select('+password +role')\n      .lean();\n\n    if (!account || !(await comparePassword(password, account.password))) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n\n    return lodash.pick(account, [\n      'role',\n      'firstName',\n      'lastName',\n      'email',\n      'gender',\n      'phone',\n      'language',\n      'createdAt',\n      '_id',\n      'avatar',\n    ]);\n  }\n\n  async logout(session: ExpressSessionUser): Promise {\n    session.destroy(() => {});\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigurationModule.html":{"url":"modules/ConfigurationModule.html","title":"module - ConfigurationModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigurationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ConfigurationModule\n\n\n\ncluster_ConfigurationModule_providers\n\n\n\ncluster_ConfigurationModule_exports\n\n\n\n\nConfigurationService \n\nConfigurationService \n\n\n\nConfigurationModule\n\nConfigurationModule\n\nConfigurationService  -->\n\nConfigurationModule->ConfigurationService \n\n\n\n\n\nConfigurationService\n\nConfigurationService\n\nConfigurationModule -->\n\nConfigurationService->ConfigurationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/config/config.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConfigurationService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ConfigurationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { ConfigurationService } from './configuration.service';\n\n@Global()\n@Module({\n  providers: [ConfigurationService],\n  exports: [ConfigurationService],\n})\nexport class ConfigurationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConfigurationService.html":{"url":"injectables/ConfigurationService.html","title":"injectable - ConfigurationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ConfigurationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/configuration.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                availableConfigs\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/config/configuration.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(configName)\n                \n            \n\n\n            \n                \n                    Defined in src/config/configuration.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    configName\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            availableConfigs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : { appConfig: appConfig(this.configService) }\n                        \n                    \n                        \n                            \n                                    Defined in src/config/configuration.service.ts:9\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { appConfig } from './app.config';\n\n@Injectable()\nexport class ConfigurationService {\n  constructor(private configService: ConfigService) {}\n\n  private availableConfigs = { appConfig: appConfig(this.configService) };\n\n  get(configName) {\n    return this.availableConfigs[configName];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAccountDTO.html":{"url":"classes/CreateAccountDTO.html","title":"class - CreateAccountDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAccountDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/account/dto/create-account.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                avatar\n                            \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                gender\n                            \n                            \n                                    Optional\n                                language\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            avatar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@MaxLength(200)@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/dto/create-account.dto.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()@MaxLength(50)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/dto/create-account.dto.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(0, 747)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/dto/create-account.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gender\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsIn(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/dto/create-account.dto.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            language\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsIn(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/dto/create-account.dto.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(0, 747)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/dto/create-account.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(8, 50)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/dto/create-account.dto.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(11, 12)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/dto/create-account.dto.ts:30\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsIn,\n  IsOptional,\n  IsString,\n  Length,\n  MaxLength,\n} from 'class-validator';\n\n// custom validation (https://dev.to/avantar/custom-validation-with-database-in-nestjs-gao)\nexport class CreateAccountDTO {\n  @IsString()\n  @Length(0, 747)\n  firstName: string;\n\n  @IsString()\n  @Length(0, 747)\n  lastName: string;\n\n  @IsString()\n  @Length(8, 50)\n  password: string;\n\n  @IsEmail()\n  @MaxLength(50)\n  email: string;\n\n  @IsString()\n  @Length(11, 12)\n  phone: string;\n\n  @IsString()\n  @IsIn(['female', 'male'])\n  gender: string;\n\n  @IsString()\n  @MaxLength(200)\n  @IsOptional()\n  avatar: string;\n\n  @IsString()\n  @IsIn(['en', 'cn', 'ms'])\n  language?: string;\n}\n\nexport class CreateAccountRoleDTO extends CreateAccountDTO {\n  role: [string];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAccountRoleDTO.html":{"url":"classes/CreateAccountRoleDTO.html","title":"class - CreateAccountRoleDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAccountRoleDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/account/dto/create-account.dto.ts\n        \n\n\n            \n                Extends\n            \n            \n                        CreateAccountDTO\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                role\n                            \n                            \n                                avatar\n                            \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                gender\n                            \n                            \n                                    Optional\n                                language\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     [string]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/dto/create-account.dto.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            avatar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@MaxLength(200)@IsOptional()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         CreateAccountDTO\n\n                                \n                            \n                        \n                            \n                                    Defined in         CreateAccountDTO:39\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()@MaxLength(50)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         CreateAccountDTO\n\n                                \n                            \n                        \n                            \n                                    Defined in         CreateAccountDTO:26\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(0, 747)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         CreateAccountDTO\n\n                                \n                            \n                        \n                            \n                                    Defined in         CreateAccountDTO:14\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gender\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsIn(undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         CreateAccountDTO\n\n                                \n                            \n                        \n                            \n                                    Defined in         CreateAccountDTO:34\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            language\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsIn(undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         CreateAccountDTO\n\n                                \n                            \n                        \n                            \n                                    Defined in         CreateAccountDTO:43\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(0, 747)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         CreateAccountDTO\n\n                                \n                            \n                        \n                            \n                                    Defined in         CreateAccountDTO:18\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(8, 50)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         CreateAccountDTO\n\n                                \n                            \n                        \n                            \n                                    Defined in         CreateAccountDTO:22\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(11, 12)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         CreateAccountDTO\n\n                                \n                            \n                        \n                            \n                                    Defined in         CreateAccountDTO:30\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsIn,\n  IsOptional,\n  IsString,\n  Length,\n  MaxLength,\n} from 'class-validator';\n\n// custom validation (https://dev.to/avantar/custom-validation-with-database-in-nestjs-gao)\nexport class CreateAccountDTO {\n  @IsString()\n  @Length(0, 747)\n  firstName: string;\n\n  @IsString()\n  @Length(0, 747)\n  lastName: string;\n\n  @IsString()\n  @Length(8, 50)\n  password: string;\n\n  @IsEmail()\n  @MaxLength(50)\n  email: string;\n\n  @IsString()\n  @Length(11, 12)\n  phone: string;\n\n  @IsString()\n  @IsIn(['female', 'male'])\n  gender: string;\n\n  @IsString()\n  @MaxLength(200)\n  @IsOptional()\n  avatar: string;\n\n  @IsString()\n  @IsIn(['en', 'cn', 'ms'])\n  language?: string;\n}\n\nexport class CreateAccountRoleDTO extends CreateAccountDTO {\n  role: [string];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomLogger.html":{"url":"classes/CustomLogger.html","title":"class - CustomLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/custom-logger.logger.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Logger\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            error\n                        \n                        \n                    \n                \n            \n            \n                \nerror(message: string, trace: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/custom-logger.logger.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trace\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\n\nexport class CustomLogger extends Logger {\n  error(message: string, trace: string) {\n    super.error(message, trace);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorException.html":{"url":"classes/ErrorException.html","title":"class - ErrorException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exception/error.exception.ts\n        \n\n\n            \n                Extends\n            \n            \n                    HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error)\n                    \n                \n                        \n                            \n                                Defined in src/exception/error.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\nexport class ErrorException extends HttpException {\n  constructor(error) {\n    super(error, HttpStatus.BAD_REQUEST);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExpressSessionUser.html":{"url":"interfaces/ExpressSessionUser.html","title":"interface - ExpressSessionUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ExpressSessionUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/account/interface/express-session-userId.interface.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Session\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        user\n                                \n                                \n                                            Optional\n                                        userId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                    \n                                \n                                \n                                    \n                                        user:         AccountProfile\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AccountProfile\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Session } from 'express-session';\nimport { AccountProfile } from './account-profile.interface';\n\nexport interface ExpressSessionUser extends Session {\n  userId?: string;\n  user?: AccountProfile;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggerModule.html":{"url":"modules/LoggerModule.html","title":"module - LoggerModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLoggerModule\n\nLoggerModule\n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/logger/logger.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CustomLogger } from './custom-logger.logger';\n\n@Module({\n  providers: [CustomLogger],\n  exports: [CustomLogger],\n})\nexport class LoggerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptor/logging.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    intercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/interceptor/logging.interceptor.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger(LoggingInterceptor.name)\n                        \n                    \n                        \n                            \n                                    Defined in src/interceptor/logging.interceptor.ts:16\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  Logger,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as moment from 'moment';\nimport * as lodash from 'lodash';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  private readonly logger = new Logger(LoggingInterceptor.name);\n\n  async intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Promise> {\n    const request: Request = context.switchToHttp().getRequest();\n    const response: Response = context.switchToHttp().getResponse();\n\n    // https://www.moesif.com/blog/technical/logging/How-we-built-a-Nodejs-Middleware-to-Log-HTTP-API-Requests-and-Responses/\n    // https://www.coreycleary.me/should-you-log-the-express-req-object-and-external-api-responses\n\n    // Log to external log manager api in future for log tracing\n    // Cannot log response object when error is thrown as filter catches the error before interceptor (find solution)\n    // https://stackoverflow.com/questions/19215042/express-logging-response-body\n\n    // repeated code; same body, rawHeaders, ... used below (to refactor in future)\n    const { body, headers, httpVersion, method, socket, url } = request;\n    const filteredHeaders = lodash.omit(headers, 'authorization'); // hide backend token\n\n    const { remoteAddress, remoteFamily } = socket;\n    const startTimestamp = +moment();\n    const correlationId = request['correlationId'];\n\n    const incomingRequestTo = `Incoming request to [${\n      context.getClass().name\n    } -> ${request['route']['path']}]`;\n\n    const time = new Date().toISOString();\n    const fromIP = request.headers['x-forwarded-for'];\n    const originalUrl = request.originalUrl;\n    const referer = request.headers.referer || '';\n    const userAgent = request.headers['user-agent'];\n    const filterRequestBody = { ...body, password: '******' }; // hide password\n\n    const requestJson = {\n      timestamp: startTimestamp,\n      time,\n      correlationId,\n      incomingRequestTo,\n      method,\n      originalUrl,\n      url,\n      headers: filteredHeaders,\n      httpVersion,\n      remoteAddress,\n      remoteFamily,\n      fromIP,\n      referer,\n      userAgent,\n      requestBody: filterRequestBody,\n    };\n\n    this.logger.log(JSON.stringify(requestJson));\n\n    return next.handle().pipe(\n      tap(() => {\n        const { httpVersion, method, socket, url } = request;\n        const { remoteAddress, remoteFamily } = socket;\n        const { statusCode, statusMessage } = response;\n\n        const correlationId = request['correlationId'];\n        const timestamp = +moment();\n        const time = new Date().toISOString();\n        const processingTime = moment\n          .unix(timestamp - startTimestamp)\n          .format('SSS');\n\n        const outgoingResponseFrom = `Outgoing response from [${\n          context.getClass().name\n        } -> ${request['route']['path']}]`;\n\n        const fromIP = request.headers['x-forwarded-for'];\n        const originalUrl = request.originalUrl;\n        const referer = request.headers.referer || '';\n        const userAgent = request.headers['user-agent'];\n        const headers = response.getHeaders();\n\n        const responseJson = {\n          timestamp,\n          time,\n          processingTime,\n          correlationId,\n          outgoingResponseFrom,\n          statusCode,\n          method,\n          originalUrl,\n          url,\n          headers: filteredHeaders,\n          httpVersion,\n          remoteAddress,\n          remoteFamily,\n          fromIP,\n          referer,\n          userAgent,\n          requestBody: filterRequestBody,\n          responseData: {\n            statusMessage,\n            headers,\n          },\n        };\n\n        // might add response data from res.json() in the future\n        this.logger.log(JSON.stringify(responseJson));\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Login.html":{"url":"interfaces/Login.html","title":"interface - Login","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Login\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/authentication/interface/login.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                                \n                                        password\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Login {\n  email: string;\n  password: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDTO.html":{"url":"classes/LoginDTO.html","title":"class - LoginDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/account/dto/login.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()@MaxLength(50)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/dto/login.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(8, 50)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/dto/login.dto.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, Length, MaxLength } from 'class-validator';\n\nexport class LoginDTO {\n  @IsEmail()\n  @MaxLength(50)\n  email: string;\n\n  @IsString()\n  @Length(8, 50)\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MongoExceptionFilter.html":{"url":"classes/MongoExceptionFilter.html","title":"class - MongoExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MongoExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filter/mongodb-exception.filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger(MongoExceptionFilter.name)\n                        \n                    \n                        \n                            \n                                    Defined in src/filter/mongodb-exception.filter.ts:15\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: MongoError, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/filter/mongodb-exception.filter.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            MongoError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport * as httpContext from 'express-http-context';\nimport * as moment from 'moment';\nimport { MongoError } from 'mongodb';\n\n@Catch(MongoError)\nexport class MongoExceptionFilter implements ExceptionFilter {\n  private readonly logger = new Logger(MongoExceptionFilter.name);\n\n  catch(exception: MongoError, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const request: Request = ctx.getRequest();\n    const response: Response = ctx.getResponse();\n\n    const timestamp = +moment();\n    const time = new Date().toUTCString();\n    const correlationId: string = httpContext.get('correlationId');\n\n    const statusCode = +exception.code;\n\n    const systemErrorMessage = exception.message;\n    const method = request.method;\n    const exceptionStack = exception.stack;\n\n    let userErrorMessage;\n    switch (statusCode) {\n      case 11000:\n        userErrorMessage = 'Duplicate key';\n        break;\n      default:\n        userErrorMessage = 'Database error ... please try again later';\n    }\n\n    const errorResponse = {\n      timestamp,\n      time,\n      correlationId,\n      statusCode,\n      message: userErrorMessage,\n    };\n\n    const loggerErrorResponse = {\n      timestamp,\n      time,\n      correlationId,\n      statusCode,\n      method,\n      systemErrorMessage,\n      exceptionStack,\n    };\n\n    this.logger.error(JSON.stringify(loggerErrorResponse));\n    response.status(HttpStatus.INTERNAL_SERVER_ERROR).json(errorResponse);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RedisConnectService.html":{"url":"injectables/RedisConnectService.html","title":"injectable - RedisConnectService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RedisConnectService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/redis/service/redis-connect.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getRedisSession\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: RedisClient, configurationService: ConfigurationService)\n                    \n                \n                        \n                            \n                                Defined in src/module/redis/service/redis-connect.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                        RedisClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configurationService\n                                                  \n                                                        \n                                                                        ConfigurationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getRedisSession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRedisSession()\n                \n            \n\n\n            \n                \n                    Defined in src/module/redis/service/redis-connect.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { RedisClient } from 'redis';\nimport { REDIS_CLIENT } from '../provider/redis.provider';\nimport * as session from 'express-session';\nimport * as connectRedis from 'connect-redis';\nimport { ConfigurationService } from 'src/config/configuration.service';\n\n@Injectable()\nexport class RedisConnectService {\n  constructor(\n    @Inject(REDIS_CLIENT) private readonly client: RedisClient,\n    private configurationService: ConfigurationService,\n  ) {}\n\n  async getRedisSession() {\n    const RedisStore = connectRedis(session);\n\n    const sessionOptions = {\n      ...this.configurationService.get('appConfig').session,\n      store: new RedisStore({\n        client: this.client,\n      }),\n    };\n    return await session(sessionOptions);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RedisModule.html":{"url":"modules/RedisModule.html","title":"module - RedisModule","body":"\n                   \n\n\n\n\n    Modules\n    RedisModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_providers\n\n\n\ncluster_RedisModule_exports\n\n\n\n\nRedisConnectService \n\nRedisConnectService \n\n\n\nRedisPromiseService \n\nRedisPromiseService \n\n\n\nRedisSubscriberService \n\nRedisSubscriberService \n\n\n\nRedisModule\n\nRedisModule\n\nRedisConnectService  -->\n\nRedisModule->RedisConnectService \n\n\n\nRedisPromiseService  -->\n\nRedisModule->RedisPromiseService \n\n\n\nRedisSubscriberService  -->\n\nRedisModule->RedisSubscriberService \n\n\n\n\n\nRedisConnectService\n\nRedisConnectService\n\nRedisModule -->\n\nRedisConnectService->RedisModule\n\n\n\n\n\nRedisPromiseService\n\nRedisPromiseService\n\nRedisModule -->\n\nRedisPromiseService->RedisModule\n\n\n\n\n\nRedisSubscriberService\n\nRedisSubscriberService\n\nRedisModule -->\n\nRedisSubscriberService->RedisModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/module/redis/redis.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RedisConnectService\n                        \n                        \n                            RedisPromiseService\n                        \n                        \n                            RedisSubscriberService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RedisConnectService\n                        \n                        \n                            RedisPromiseService\n                        \n                        \n                            RedisSubscriberService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { RedisConnectService } from './service/redis-connect.service';\nimport { RedisSubscriberClient } from './provider/redis-subscriber.provider';\nimport { RedisSubscriberService } from './service/redis-subscriber.service';\nimport { RedisClient } from './provider/redis.provider';\nimport { RedisPromiseService } from './service/redis-promise.service';\n\n@Module({\n  imports: [ConfigModule],\n  providers: [\n    RedisClient,\n    RedisSubscriberClient,\n    RedisPromiseService,\n    RedisConnectService,\n    RedisSubscriberService,\n  ],\n  exports: [RedisPromiseService, RedisConnectService, RedisSubscriberService],\n})\nexport class RedisModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RedisPromiseService.html":{"url":"injectables/RedisPromiseService.html","title":"injectable - RedisPromiseService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RedisPromiseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/redis/service/redis-promise.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                del\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: RedisClient)\n                    \n                \n                        \n                            \n                                Defined in src/module/redis/service/redis-promise.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                        RedisClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            del\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    del(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/redis/service/redis-promise.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/redis/service/redis-promise.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            set\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    set(key: string, value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/redis/service/redis-promise.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { RedisClient } from 'redis';\n\nimport { promisify } from 'util';\nimport { REDIS_CLIENT } from '../provider/redis.provider';\n\n@Injectable()\nexport class RedisPromiseService {\n  constructor(@Inject(REDIS_CLIENT) private readonly client: RedisClient) {}\n\n  // promisify redis: https://noahkreiger.medium.com/nodejs-redis-setting-it-up-asynchronously-ba8db73e07de\n\n  async get(key: string): Promise {\n    const get = promisify(this.client.get).bind(this.client);\n    return await get(key);\n  }\n\n  async set(key: string, value: string): Promise {\n    const set = promisify(this.client.set).bind(this.client);\n    return await set(key, value);\n  }\n\n  async del(key: string): Promise {\n    const del = promisify(this.client.del).bind(this.client);\n    await del(key);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RedisSubscribeExpiredService.html":{"url":"injectables/RedisSubscribeExpiredService.html","title":"injectable - RedisSubscribeExpiredService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RedisSubscribeExpiredService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/session/redis-subscribe-expired.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                subscribeRedisExpired\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(redisSubscriberService: RedisSubscriberService, accountService: AccountService)\n                    \n                \n                        \n                            \n                                Defined in src/module/session/redis-subscribe-expired.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        redisSubscriberService\n                                                  \n                                                        \n                                                                        RedisSubscriberService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountService\n                                                  \n                                                        \n                                                                        AccountService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            subscribeRedisExpired\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    subscribeRedisExpired()\n                \n            \n\n\n            \n                \n                    Defined in src/module/session/redis-subscribe-expired.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AccountService } from '../../module/account/account.service';\nimport { RedisSubscriberService } from '../../module/redis/service/redis-subscriber.service';\n\n@Injectable()\nexport class RedisSubscribeExpiredService {\n  constructor(\n    private readonly redisSubscriberService: RedisSubscriberService,\n    private readonly accountService: AccountService,\n  ) {}\n\n  async subscribeRedisExpired(): Promise {\n    /*\n      https://medium.com/@micah1powell/using-redis-keyspace-notifications-for-a-reminder-service-with-node-c05047befec3\n      https://stackoverflow.com/questions/62986974/how-to-make-asynchronous-redis-subscriber-call\n    */\n    await this.redisSubscriberService.subscribe('__keyevent@0__:expired');\n    await this.redisSubscriberService.on(\n      'message',\n      async (channel: string, message: string) => {\n        // message: sess:WQDBfSXSMJgLozKgX8-XM97iMOD7DdVr\n        // above is what variable message contains but the sessionId store in MongoDB is WQDBfSXSMJgLozKgX8-XM97iMOD7DdVr\n        // the sessionId does not contain \"sess:\" as prefix\n        await this.accountService.destroySessionFromMongoBySessionId(\n          message.split(':')[1],\n        );\n      },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RedisSubscriberService.html":{"url":"injectables/RedisSubscriberService.html","title":"injectable - RedisSubscriberService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RedisSubscriberService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/redis/service/redis-subscriber.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                on\n                            \n                            \n                                    Async\n                                subscribe\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: RedisClient)\n                    \n                \n                        \n                            \n                                Defined in src/module/redis/service/redis-subscriber.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                        RedisClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            on\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    on(event: string, fn)\n                \n            \n\n\n            \n                \n                    Defined in src/module/redis/service/redis-subscriber.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fn\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            subscribe\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    subscribe(channel: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/redis/service/redis-subscriber.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    channel\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { RedisClient } from 'redis';\nimport { promisify } from 'util';\nimport { REDIS_SUBSCRIBER_CLIENT } from '../provider/redis-subscriber.provider';\n\n@Injectable()\nexport class RedisSubscriberService {\n  constructor(\n    @Inject(REDIS_SUBSCRIBER_CLIENT) private readonly client: RedisClient,\n  ) {}\n\n  async subscribe(channel: string): Promise {\n    const subscribe = promisify(this.client.subscribe).bind(this.client);\n    return await subscribe(channel);\n  }\n\n  async on(event: string, fn): Promise {\n    return await this.client.on(event, (channel, message) =>\n      fn(channel, message),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RoleGuard.html":{"url":"guards/RoleGuard.html","title":"guard - RoleGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RoleGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guard/role/role.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/guard/role/role.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guard/role/role.guard.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Reflector } from '@nestjs/core';\nimport { Request } from 'express';\nimport { verifyBackendToken } from '../../../shared/utils';\nimport { ExpressSessionUser } from '../../module/account/interface/express-session-userId.interface';\nimport { ROLES_KEY } from './role.decorator';\nimport { Role } from './role.enum';\n\n@Injectable()\nexport class RoleGuard implements CanActivate {\n  constructor(\n    private readonly reflector: Reflector,\n    private configService: ConfigService,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const allowedRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (!allowedRoles) {\n      return true;\n    }\n\n    const request: Request = context.switchToHttp().getRequest();\n    const session: ExpressSessionUser = request.session;\n\n    // if (!session?.user) {\n    //   throw new Error('To be replaced with custom error');\n    // }\n\n    const verifiedBackendToken = verifyBackendToken(\n      request,\n      this.configService,\n    );\n    const verifiedARequiredRoles = allowedRoles.some((role) =>\n      session.user?.role?.includes(role),\n    );\n\n    return verifiedARequiredRoles || verifiedBackendToken;\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SessionModule.html":{"url":"modules/SessionModule.html","title":"module - SessionModule","body":"\n                   \n\n\n\n\n    Modules\n    SessionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_imports\n\n\n\ncluster_SessionModule_providers\n\n\n\n\nAccountModule\n\nAccountModule\n\n\n\nSessionModule\n\nSessionModule\n\nSessionModule -->\n\nAccountModule->SessionModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nSessionModule -->\n\nRedisModule->SessionModule\n\n\n\n\n\nRedisSubscribeExpiredService\n\nRedisSubscribeExpiredService\n\nSessionModule -->\n\nRedisSubscribeExpiredService->SessionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/module/session/session.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RedisSubscribeExpiredService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AccountModule\n                        \n                        \n                            RedisModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AccountModule } from '../../module/account/account.module';\nimport { RedisModule } from '../../module/redis/redis.module';\nimport { RedisSubscribeExpiredService } from './redis-subscribe-expired.service';\n\n@Module({\n  imports: [RedisModule, AccountModule],\n  providers: [RedisSubscribeExpiredService],\n})\nexport class SessionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAccountDTO.html":{"url":"classes/UpdateAccountDTO.html","title":"class - UpdateAccountDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAccountDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/account/dto/update-account-profile.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                avatar\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                email\n                            \n                            \n                                    Optional\n                                firstName\n                            \n                            \n                                gender\n                            \n                            \n                                    Optional\n                                language\n                            \n                            \n                                    Optional\n                                lastName\n                            \n                            \n                                    Optional\n                                password\n                            \n                            \n                                    Optional\n                                phone\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            avatar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@MaxLength(200)@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/dto/update-account-profile.dto.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDate()@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/dto/update-account-profile.dto.ts:55\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()@MaxLength(50)@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/dto/update-account-profile.dto.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(0, 747)@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/dto/update-account-profile.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gender\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsIn(undefined)@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/dto/update-account-profile.dto.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            language\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsIn(undefined)@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/dto/update-account-profile.dto.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(0, 747)@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/dto/update-account-profile.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(8, 50)@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/dto/update-account-profile.dto.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            phone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(11, 12)@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/dto/update-account-profile.dto.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDate()@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/account/dto/update-account-profile.dto.ts:59\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsDate,\n  IsEmail,\n  IsIn,\n  IsOptional,\n  IsString,\n  Length,\n  MaxLength,\n} from 'class-validator';\n\nexport class UpdateAccountDTO {\n  @IsString()\n  @Length(0, 747)\n  @IsOptional()\n  firstName?: string;\n\n  @IsString()\n  @Length(0, 747)\n  @IsOptional()\n  lastName?: string;\n\n  @IsString()\n  @Length(8, 50)\n  @IsOptional()\n  password?: string;\n\n  @IsEmail()\n  @MaxLength(50)\n  @IsOptional()\n  email?: string;\n\n  @IsString()\n  @Length(11, 12)\n  @IsOptional()\n  phone?: string;\n\n  @IsString()\n  @IsIn(['female', 'male'])\n  @IsOptional()\n  gender: string;\n\n  @IsString()\n  @MaxLength(200)\n  @IsOptional()\n  avatar?: string;\n\n  @IsString()\n  @IsIn(['en', 'cn', 'ms'])\n  @IsOptional()\n  language?: string;\n\n  // remove ability to update createdAt updatedAt in the future\n  @IsDate()\n  @IsOptional()\n  createdAt?: Date;\n\n  @IsDate()\n  @IsOptional()\n  updatedAt?: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserRedisSession.html":{"url":"interfaces/UserRedisSession.html","title":"interface - UserRedisSession","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UserRedisSession\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/account/interface/user-redis-session.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                                \n                                        firstName\n                                \n                                \n                                        gender\n                                \n                                \n                                            Optional\n                                        id\n                                \n                                \n                                        lastName\n                                \n                                \n                                        phone\n                                \n                                \n                                            Optional\n                                        redisSessionId\n                                \n                                \n                                        role\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gender\n                                    \n                                \n                                \n                                    \n                                        gender:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        redisSessionId\n                                    \n                                \n                                \n                                    \n                                        redisSessionId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                    \n                                \n                                \n                                    \n                                        role:     [string]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [string]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserRedisSession {\n  id?: string;\n  redisSessionId?: string;\n  role: [string];\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  gender: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pipe/validation.pipe.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            toValidate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/pipe/validation.pipe.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, undefined: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/pipe/validation.pipe.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ArgumentMetadata, Injectable, PipeTransform } from '@nestjs/common';\nimport { plainToClass } from 'class-transformer';\nimport { validate } from 'class-validator';\nimport { ErrorException } from '../exception/error.exception';\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  async transform(value: any, { metatype }: ArgumentMetadata) {\n    if (!metatype || !this.toValidate(metatype)) {\n      return true;\n    }\n\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      const formattedErrors = [];\n\n      errors.forEach((error) => {\n        formattedErrors.push(...Object.values(error.constraints));\n      });\n\n      throw new ErrorException({ validationError: formattedErrors });\n    }\n    return value;\n  }\n\n  private toValidate(metatype: Function): boolean {\n    const types: Function[] = [String, Boolean, Number, Array, Object];\n    return !types.includes(metatype);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                shared/utils.ts\n            \n            variable\n            setCorrelationId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                shared/utils.ts\n            \n            variable\n            verifyBackendToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.configuration.ts\n            \n            variable\n            appConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/configuration.service.ts\n            \n            injectable\n            ConfigurationService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/exception/error.exception.ts\n            \n            class\n            ErrorException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/filter/http-exception.filter.ts\n            \n            class\n            AllExceptionFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/filter/mongodb-exception.filter.ts\n            \n            class\n            MongoExceptionFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guard/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/guard/role/role.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guard/role/role.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guard/role/role.guard.ts\n            \n            guard\n            RoleGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/interceptor/logging.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/logger/custom-logger.logger.ts\n            \n            class\n            CustomLogger\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/account/account.constant.ts\n            \n            variable\n            DEFAULT_ACCOUNT_ROLE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/account/account.helper.ts\n            \n            variable\n            comparePassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/account/account.helper.ts\n            \n            variable\n            hashPassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/account/account.helper.ts\n            \n            variable\n            isAccountTaken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/account/account.service.ts\n            \n            injectable\n            AccountService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/module/account/controller/account-admin.controller.ts\n            \n            controller\n            AccountAdminController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/module/account/controller/account-admin.mock-response.ts\n            \n            variable\n            createAccountReponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/account/controller/account-admin.mock-response.ts\n            \n            variable\n            deleteAccountReponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/account/controller/account-admin.mock-response.ts\n            \n            variable\n            destroySessionReponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/account/controller/account-admin.mock-response.ts\n            \n            variable\n            getAccountByIdReponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/account/controller/account-admin.mock-response.ts\n            \n            variable\n            getAccountByRedisSessionIdReponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/account/controller/account-admin.mock-response.ts\n            \n            variable\n            getAllAccountsReponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/account/controller/account-admin.mock-response.ts\n            \n            variable\n            updateAccountReponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/account/controller/account-admin.mock.ts\n            \n            variable\n            mockAccountService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/account/controller/account-admin.mock.ts\n            \n            variable\n            mockCookie\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/account/controller/account-admin.mock.ts\n            \n            variable\n            mockSession\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/account/controller/account-admin.mock.ts\n            \n            variable\n            mockUpdateUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/account/controller/account-admin.mock.ts\n            \n            variable\n            mockUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/account/controller/account.controller.ts\n            \n            controller\n            AccountController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/module/account/dto/create-account.dto.ts\n            \n            class\n            CreateAccountDTO\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/module/account/dto/create-account.dto.ts\n            \n            class\n            CreateAccountRoleDTO\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/module/account/dto/login.dto.ts\n            \n            class\n            LoginDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/module/account/dto/update-account-profile.dto.ts\n            \n            class\n            UpdateAccountDTO\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/module/account/interface/account-profile.interface.ts\n            \n            interface\n            AccountProfile\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/module/account/interface/express-session-userId.interface.ts\n            \n            interface\n            ExpressSessionUser\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/module/account/interface/user-redis-session.interface.ts\n            \n            interface\n            UserRedisSession\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/module/account/schema/account.schema.ts\n            \n            class\n            Account\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/module/account/schema/account.schema.ts\n            \n            variable\n            AccountSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/authentication/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/module/authentication/interface/login.interface.ts\n            \n            interface\n            Login\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/module/mongoose/mongoose.configuration.ts\n            \n            variable\n            mongooseConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/mongoose/mongoose.provider.ts\n            \n            variable\n            MongooseClient\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/redis/provider/redis-subscriber.provider.ts\n            \n            variable\n            REDIS_SUBSCRIBER_CLIENT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/redis/provider/redis-subscriber.provider.ts\n            \n            variable\n            RedisSubscriberClient\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/redis/provider/redis.provider.ts\n            \n            variable\n            REDIS_CLIENT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/redis/provider/redis.provider.ts\n            \n            variable\n            RedisClient\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/redis/redis.configuration.ts\n            \n            variable\n            redisConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/redis/service/redis-connect.service.ts\n            \n            injectable\n            RedisConnectService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/module/redis/service/redis-promise.service.ts\n            \n            injectable\n            RedisPromiseService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/module/redis/service/redis-subscriber.service.ts\n            \n            injectable\n            RedisSubscriberService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/module/session/redis-subscribe-expired.service.ts\n            \n            injectable\n            RedisSubscribeExpiredService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/pipe/validation.pipe.ts\n            \n            injectable\n            ValidationPipe\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.6.15\n        \n            @nestjs/config : ^0.6.3\n        \n            @nestjs/core : ^7.6.15\n        \n            @nestjs/mongoose : ^7.2.4\n        \n            @nestjs/platform-express : ^7.6.15\n        \n            @types/connect-redis : ^0.0.16\n        \n            @types/ioredis : ^4.26.4\n        \n            @types/lodash : ^4.14.170\n        \n            @types/mongodb : ^3.6.19\n        \n            @types/redis : ^2.8.30\n        \n            @types/rx : ^4.1.2\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            connect-redis : ^6.0.0\n        \n            csurf : ^1.11.0\n        \n            express-http-context : ^1.2.4\n        \n            express-session : ^1.17.2\n        \n            helmet : ^4.6.0\n        \n            ioredis : ^4.27.6\n        \n            lodash : ^4.17.21\n        \n            moment : ^2.29.1\n        \n            mongoose : ^5.12.15\n        \n            redis : ^3.1.2\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.6\n        \n            uuid : ^8.3.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Role   (src/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/guard/role/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AccountModule\n\n\n\ncluster_AccountModule_imports\n\n\n\ncluster_AccountModule_exports\n\n\n\ncluster_AccountModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_ConfigurationModule\n\n\n\ncluster_ConfigurationModule_exports\n\n\n\ncluster_ConfigurationModule_providers\n\n\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_exports\n\n\n\ncluster_RedisModule_providers\n\n\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAccountModule\n\nAccountModule\n\nAccountModule -->\n\nAuthenticationModule->AccountModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\nAuthenticationService  -->\n\nAuthenticationModule->AuthenticationService \n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAccountModule -->\n\nLoggerModule->AccountModule\n\n\n\n\n\nCustomLogger \n\nCustomLogger \n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAuthenticationModule -->\n\nRedisModule->AuthenticationModule\n\n\n\nAccountModule -->\n\nRedisModule->AccountModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nSessionModule -->\n\nRedisModule->SessionModule\n\n\n\n\n\nRedisConnectService \n\nRedisConnectService \n\nRedisConnectService  -->\n\nRedisModule->RedisConnectService \n\n\n\n\n\nRedisPromiseService \n\nRedisPromiseService \n\nRedisPromiseService  -->\n\nRedisModule->RedisPromiseService \n\n\n\n\n\nRedisSubscriberService \n\nRedisSubscriberService \n\nRedisSubscriberService  -->\n\nRedisModule->RedisSubscriberService \n\n\n\n\n\nAccountService \n\nAccountService \n\nAccountService  -->\n\nAccountModule->AccountService \n\n\n\nSessionModule -->\n\nAccountModule->SessionModule\n\n\n\nAppModule -->\n\nAccountModule->AppModule\n\n\n\n\n\nAccountService\n\nAccountService\n\nAccountModule -->\n\nAccountService->AccountModule\n\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\nAppModule -->\n\nConfigurationModule->AppModule\n\n\n\n\n\nConfigurationService \n\nConfigurationService \n\nConfigurationService  -->\n\nConfigurationModule->ConfigurationService \n\n\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nConfigurationService\n\nConfigurationService\n\nConfigurationModule -->\n\nConfigurationService->ConfigurationModule\n\n\n\n\n\nRedisConnectService\n\nRedisConnectService\n\nRedisModule -->\n\nRedisConnectService->RedisModule\n\n\n\n\n\nRedisPromiseService\n\nRedisPromiseService\n\nRedisModule -->\n\nRedisPromiseService->RedisModule\n\n\n\n\n\nRedisSubscriberService\n\nRedisSubscriberService\n\nRedisModule -->\n\nRedisSubscriberService->RedisModule\n\n\n\n\n\nRedisSubscribeExpiredService\n\nRedisSubscribeExpiredService\n\nSessionModule -->\n\nRedisSubscribeExpiredService->SessionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AccountModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigurationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RedisModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SessionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AccountDocument   (src/.../account.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/module/account/schema/account.schema.ts\n    \n    \n        \n            \n                \n                    \n                    AccountDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AccountSchema   (src/.../account.schema.ts)\n                        \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                        \n                            appConfiguration   (src/.../app.configuration.ts)\n                        \n                        \n                            comparePassword   (src/.../account.helper.ts)\n                        \n                        \n                            createAccountReponse   (src/.../account-admin.mock-response.ts)\n                        \n                        \n                            DEFAULT_ACCOUNT_ROLE   (src/.../account.constant.ts)\n                        \n                        \n                            deleteAccountReponse   (src/.../account-admin.mock-response.ts)\n                        \n                        \n                            destroySessionReponse   (src/.../account-admin.mock-response.ts)\n                        \n                        \n                            getAccountByIdReponse   (src/.../account-admin.mock-response.ts)\n                        \n                        \n                            getAccountByRedisSessionIdReponse   (src/.../account-admin.mock-response.ts)\n                        \n                        \n                            getAllAccountsReponse   (src/.../account-admin.mock-response.ts)\n                        \n                        \n                            hashPassword   (src/.../account.helper.ts)\n                        \n                        \n                            isAccountTaken   (src/.../account.helper.ts)\n                        \n                        \n                            logger   (src/.../main.ts)\n                        \n                        \n                            mockAccountService   (src/.../account-admin.mock.ts)\n                        \n                        \n                            mockCookie   (src/.../account-admin.mock.ts)\n                        \n                        \n                            mockSession   (src/.../account-admin.mock.ts)\n                        \n                        \n                            mockUpdateUser   (src/.../account-admin.mock.ts)\n                        \n                        \n                            mockUser   (src/.../account-admin.mock.ts)\n                        \n                        \n                            MongooseClient   (src/.../mongoose.provider.ts)\n                        \n                        \n                            mongooseConfiguration   (src/.../mongoose.configuration.ts)\n                        \n                        \n                            REDIS_CLIENT   (src/.../redis.provider.ts)\n                        \n                        \n                            REDIS_SUBSCRIBER_CLIENT   (src/.../redis-subscriber.provider.ts)\n                        \n                        \n                            RedisClient   (src/.../redis.provider.ts)\n                        \n                        \n                            redisConfiguration   (src/.../redis.configuration.ts)\n                        \n                        \n                            RedisSubscriberClient   (src/.../redis-subscriber.provider.ts)\n                        \n                        \n                            Roles   (src/.../role.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../role.decorator.ts)\n                        \n                        \n                            setCorrelationId   (shared/.../utils.ts)\n                        \n                        \n                            updateAccountReponse   (src/.../account-admin.mock-response.ts)\n                        \n                        \n                            verifyBackendToken   (shared/.../utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/module/account/schema/account.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AccountSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Account)\n                        \n                    \n\n\n            \n        \n\n    src/config/app.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            appConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (configService: ConfigService) => ({\n  cors: {\n    origin: '*',\n    methods: ['GET', 'HEAD', 'PUT', 'PATCH', 'POST', 'DELETE'],\n    allowedHeaders: [\n      'Content-Type',\n      'Authorization',\n      'Access-Control-Allow-Headers',\n      'DNT',\n      'X-CustomHeader',\n      'Keep-Alive',\n      'User-Agent',\n      'X-Requested-With',\n      'If-Modified-Since',\n      'Cache-Control',\n      'Content-Type',\n    ],\n  },\n  session: {\n    /* might exsist some difference if maxAge (session) & ttl (redis) since we are not using the redisStore for\n        the store options here (due to configuring CacheModule to use redis)\n      */\n    secret: configService.get('app.session.secret'),\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      // best practice is to set to true during production\n      secure:\n        configService.get('app.environment') === 'development' ? false : true,\n      httpOnly: false,\n      maxAge: 1000 * 60 * 10, // millisecond * second * minute (ToDo: put configuration to .env file)\n    },\n  },\n})\n                        \n                    \n\n\n            \n        \n\n    src/app.configuration.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            appConfiguration\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => ({\n  app: {\n    session: {\n      secret: process.env.EXPRESS_SESSION_SECRET,\n    },\n    environment: process.env.NODE_ENV || 'development',\n    port: process.env.SERVER_PORT || 3000,\n  },\n})\n                        \n                    \n\n\n            \n        \n\n    src/module/account/account.helper.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            comparePassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : async (\n  password: string,\n  hash: string,\n): Promise => {\n  return await bcrypt.compare(password, hash);\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hashPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : async (oldPassword: string): Promise => {\n  const saltRounds = 10;\n  return await bcrypt.hash(oldPassword, saltRounds);\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isAccountTaken\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : async (\n  accountModel: Model,\n  email: string,\n): Promise => {\n  const account = await accountModel.findOne({ email });\n  return !!account;\n}\n                        \n                    \n\n\n            \n        \n\n    src/module/account/controller/account-admin.mock-response.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            createAccountReponse\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteAccountReponse\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            destroySessionReponse\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : undefined\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getAccountByIdReponse\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AccountProfile\n\n                        \n                    \n                    \n                        \n                            Default value : mockUser\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getAccountByRedisSessionIdReponse\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AccountProfile\n\n                        \n                    \n                    \n                        \n                            Default value : mockUser\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getAllAccountsReponse\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AccountProfile[]\n\n                        \n                    \n                    \n                        \n                            Default value : [mockUser]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updateAccountReponse\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : mockUpdateUser\n                        \n                    \n\n\n            \n        \n\n    src/module/account/account.constant.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_ACCOUNT_ROLE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'user'\n                        \n                    \n\n\n            \n        \n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger('Main')\n                        \n                    \n\n\n            \n        \n\n    src/module/account/controller/account-admin.mock.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            mockAccountService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  getAllAccounts: jest.fn().mockResolvedValue(getAllAccountsReponse),\n  getAccountByRedisSessionId: jest\n    .fn()\n    .mockResolvedValue(getAccountByRedisSessionIdReponse),\n  getAccountById: jest.fn().mockResolvedValue(getAccountByIdReponse),\n  createAccount: jest.fn().mockResolvedValue(createAccountReponse),\n  updateAccount: jest.fn().mockResolvedValue(updateAccountReponse),\n  deleteAccount: jest.fn().mockResolvedValue(deleteAccountReponse),\n  destroySession: jest.fn().mockResolvedValue(destroySessionReponse),\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mockCookie\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Cookie\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  originalMaxAge: 1000,\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mockSession\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExpressSessionUser\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  id: '1',\n  cookie: mockCookie,\n  regenerate: jest.fn(),\n  destroy: jest.fn(),\n  reload: jest.fn(),\n  resetMaxAge: jest.fn(),\n  save: jest.fn(),\n  touch: jest.fn(),\n  user: mockUser,\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mockUpdateUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UpdateAccountDTO\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  firstName: 'Kay',\n  lastName: 'Johnathan',\n  email: 'kay@gmail.com',\n  gender: 'male',\n  phone: '930-129-293',\n  language: 'en',\n  createdAt: new Date('2021-07-06T07:36:34.394Z'),\n  updatedAt: new Date('2021-07-06T07:36:34.394Z'),\n  avatar: 'https://image.flaticon.com/icons/png/512/2922/2922688.png',\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mockUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AccountProfile\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  firstName: 'Kay',\n  lastName: 'Johnathan',\n  email: 'kay@gmail.com',\n  gender: 'male',\n  phone: '930-129-293',\n  language: 'en',\n  createdAt: new Date('2021-07-06T07:36:34.394Z'),\n  updatedAt: new Date('2021-07-06T07:36:34.394Z'),\n  avatar: 'https://image.flaticon.com/icons/png/512/2922/2922688.png',\n  role: ['user'],\n}\n                        \n                    \n\n\n            \n        \n\n    src/module/mongoose/mongoose.provider.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            MongooseClient\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  useFactory: async (configService: ConfigService) => ({\n    uri: configService.get('mongoose.uri'),\n    useUnifiedTopology: true,\n    useFindAndModify: false,\n    useNewUrlParser: true,\n    createIndexes: false,\n  }),\n  inject: [ConfigService],\n}\n                        \n                    \n\n\n            \n        \n\n    src/module/mongoose/mongoose.configuration.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            mongooseConfiguration\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => ({\n  mongoose: {\n    uri: process.env.MONGO_DATABASE_URI,\n  },\n})\n                        \n                    \n\n\n            \n        \n\n    src/module/redis/provider/redis.provider.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            REDIS_CLIENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'RedisClient'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RedisClient\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  provide: REDIS_CLIENT,\n  useFactory: (configService: ConfigService) => {\n    const redisClientOptions = {\n      host: configService.get('redis.host'),\n      port: configService.get('redis.port'),\n      auth_pass: configService.get('redis.password'),\n    };\n\n    const client = redis.createClient(redisClientOptions);\n    return client;\n  },\n  inject: [ConfigService],\n}\n                        \n                    \n\n\n            \n        \n\n    src/module/redis/provider/redis-subscriber.provider.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            REDIS_SUBSCRIBER_CLIENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'RedisSubscriberClient'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RedisSubscriberClient\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  provide: REDIS_SUBSCRIBER_CLIENT,\n  useFactory: (configService: ConfigService) => {\n    const redisClientOptions = {\n      host: configService.get('redis.host'),\n      port: configService.get('redis.port'),\n      password: configService.get('redis.password'),\n    };\n\n    const client: Redis.Redis = new Redis(redisClientOptions);\n    // enable option to receive events produced by redis events\n    // https:stackoverflow.com/questions/58682974/listen-for-changes-in-redis-list\n    client.config('SET', 'notify-keyspace-events', 'Ex');\n    return client;\n  },\n  inject: [ConfigService],\n}\n                        \n                    \n\n\n            \n        \n\n    src/module/redis/redis.configuration.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            redisConfiguration\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => ({\n  redis: {\n    host: process.env.REDIS_HOST,\n    port: process.env.REDIS_PORT,\n    password: process.env.REDIS_PASSWORD,\n  },\n})\n                        \n                    \n\n\n            \n        \n\n    src/guard/role/role.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ROLES_KEY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'role'\n                        \n                    \n\n\n            \n        \n\n    shared/utils.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            setCorrelationId\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (req, res, next) => {\n  const correlationId = uuidv4();\n  req.correlationId = correlationId;\n  httpContext.set('correlationId', correlationId);\n  next();\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            verifyBackendToken\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  request: Request,\n  configService: ConfigService,\n) => {\n  const token = request.headers.authorization?.split(' ')[1];\n  const backendToken = configService.get('BACKEND_TOKEN');\n  return backendToken === token;\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
